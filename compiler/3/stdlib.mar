| Welcome to Martinaise!  
| Martinaise is a language that's designed for solving simple puzzles such as
| advent of code. Making a language that is widely-used is _not_ the goal.
| Instead, this is a fun, recreational project.
|
| The language is quite small, so it doesn't have many built-in types and
| functions. Apart from integers as well as mathematical functions for them, it
| only provides very slim wrappers around some libc functions.
| Everything else is defined in Martinaise code, even very basic things like
| Bool. The compiler relies on some of these definitions, so be careful when
| deleting code in this file.

| Language todos  
| TODO: change libc wrappers to use I32 for ints
| TODO: validate all signatures before lowering
| TODO: allow types on vars
| TODO: break and continue with targets
| TODO: enforce that statement-like expressions evaluate to Nothing
| TODO: add String type
| TODO: enum Foo { bar: Bar, baz: Baz } -> foo.bar: Maybe[Bar]
| TODO: disallow _ in type args, structs, enums, and recursive functions
| TODO: improve int parsing: be strict about whitespace, use :U8
| TODO: unwrap?
| TODO: funs as values, function types, higher-order funs?
| TODO: operators?
| TODO: var bool = foo is some?
| TODO: slice literals? array literals?
| TODO: type aliases?
| TODO: struct destructuring?
| TODO: provide way to get memory layouts of types as runtime first-class values

| Nothing (aka Unit or Void)  
| Nothing is a type with only one instance. From an information theoretical
| perspective, being given an instance of a Nothing type gives you no
| information whatsoever. The size of a Nothing instance is zero – it disappears
| at compile time! Like a ghost!
| Functions without an explicit return type return Nothing by default. Functions
| that don't have anything useful to return (such as print) return Nothing
| instead. Empty bodies return Nothing. If you really need a Nothing, you can
| just write {}.

struct Nothing {}

fun write[W](writer: W, nothing: Nothing) { writer."nothing" }
fun equals(a: Nothing, b: Nothing): Bool { true }
fun ignore[T](value: T) {}

| Never  
| Never is a type with zero instances. If you write a function that accepts an
| argument of Never, it can never be called (otherwise, the caller would have
| a Never instance).
| Why do we need something like this? Some expressions always abort control
| flow, for example `return 3` or `continue` or `break(your_leg)`. These
| evaluate to the Never type. Because Never is never instantiated, it can be
| assigned to anything:
|
| foo.some_bool = return "Hi"
| 2.add(if condition then 3 else break)
| Maybe[U64].some(todo())

enum Never {}

| Equality  
| You should implement an equals(T, T): Bool function for types that can be
| compared for equality.

fun not_equals[T](a: T, b: T): Bool { not(a.equals(b)) }

| Hashing  
| You should implement a hash(&Hasher, T) function for types that can be hashed.
| In this function, they can contribute some uniqueness/entropy to the Hasher by
| calling other hash functions on it. In the end, all hash functions boil down
| to hash(&Hasher, U64). The Hasher uses the djb2 algorithm.

fun hash[T](value: T): U64 {
  var hasher = Hasher { state = 5381 }
  hasher.&.hash(value)
  hasher.state
}

struct Hasher { state: U64 }
fun hash(hasher: &Hasher, val: U64) {
  hasher.state = hasher.state.multiply(33).add(val)
}
fun hash_all[I](hasher: &Hasher, iter: I) {
  for item in iter do hasher.hash(item)
}

| Emptiness  
| Do you sometimes feel empty inside? Some collections in the stdlib do so as
| well! In fact, many have an is_empty function. For convencience, we also
| define an is_not_empty function.

fun is_not_empty[T](container: T): Bool { not(container.is_empty()) }

| Bool  
| After the Never type with zero instances and the Nothing type with one
| instance, Norwegian scientists discovered a groundbreaking concept: A type
| with two instances!
| Like with Never and Nothing, the Martinaise compiler depends on this type
| existing. Please don't remove it. And pretty please don't reassign the global
| true and false variables.

enum Bool { false, true }

var true = Bool.true
var false = Bool.false

fun equals(a: Bool, b: Bool): Bool { if a then b else not(b) }
fun not(a: Bool): Bool { if a then false else true }
fun and(a: Bool, b: Bool): Bool { if a then b else a }
fun or(a: Bool, b: Bool): Bool { if a then true else b }
fun xor(a: Bool, b: Bool): Bool { if a then not(b) else b }
fun implies(a: Bool, b: Bool): Bool { if a then b else true }

fun write[W](writer: W, b: Bool) {
  writer.write(if b then "true" else "false")
}
fun hash(hasher: &Hasher, value: Bool) { hasher.hash(if value then 0 else 1) }

| Maybe  
| Represents optional values. Like Option in Rust, but with the cooler Haskell
| name.

enum Maybe[T] { some: T, none }

fun some[T](value: T): Maybe[T] { Maybe.some(value) }
fun none[T](): Maybe[T] { Maybe[T].none }

fun unwrap[T](maybe: Maybe[T], message: Str): T { maybe orelse panic(message) }
fun unwrap[T](maybe: Maybe[T]): T { maybe.unwrap("called none.unwrap") }
fun flatten[T](maybe: Maybe[Maybe[T]]): Maybe[T] { inner orelse none[T]() }
fun is_some[T](maybe: Maybe[T]): Bool { if maybe is some then true else false }
fun is_none[T](maybe: Maybe[T]): Bool { if maybe is none then true else false }

fun write[W, T](writer: W, maybe: Maybe[T]) {
  switch maybe
  case some(val) writer."some({val})"
  case none writer."none"
}
fun equals[T](a: Maybe[T], b: Maybe[T]): Bool {
  switch a
  case some(aa) { switch b case some(bb) aa.equals(bb) case none false }
  case none b.is_none()
}
fun hash[T](hasher: &Hasher, value: Maybe[T]) {
  switch value
  case some(inner) {
    hasher.hash(#s)
    hasher.hash(inner)
  }
  case none hasher.hash(#n)
}

| Result  
| The result of something that can either work or fail.
enum Result[O, E] { ok: O, error: E }

fun ok[O, E](o: O): Result[O, E] { Result[O, E].ok(o) }
fun error[O, E](e: E): Result[O, E] { Result[O, E].error(e) }

fun unwrap[O, E](result: Result[O, E]): O {
  switch result case ok(o) o case error(e) panic("called error.unwrap")
}

fun write[W, O, E](writer: W, result: Result[O, E]) {
  switch result
  case ok(o) writer."ok({o})"
  case error(e) writer."error({e})"
}
fun equals[O, E](a: Result[O, E], b: Result[O, E]): Bool {
  switch a
  case ok(ao) { switch b case ok(bo) ao.equals(bo) case error false }
  case error(ae) { switch b case error(be) ae.equals(be) case ok false }
}
fun hash[O, E](hasher: &Hasher, result: Result[O, E]) {
  switch result
  case ok(o) { hasher.hash(#o) hasher.hash(o) }
  case error(e) { hasher.hash(#e) hasher.hash(e) }
}

| Orelse  
| Martinaise has an orelse keyword, which you can write after a Maybe[T] or
| "something similar" to get underlying value if everything is okay, and to run
| an alternative expression if it's not. For example, you can write the
| following code:
|
| some(2) orelse 3      | this is 2
| none[U64]() orelse 3  | this is 3
|
| vec.is_empty() orelse panic("expected list to be empty")
| var int = result_of_int orelse(error) error.len
|
| About that "something similar to Maybe": Internally, the orelse keyword calls
| a to_orelse() function on the expression on the left. This should return an
| Orelse[P, S]. If it's a primary P, that P is just the result of the orelse.
| If it's a secondary S, alternative expression on the right of the orelse is
| evaluated.
|
| You might wonder if this keyword is stolen from Zig. Yes, it is.

enum Orelse[P, S] { primary: P, secondary: S }

fun to_orelse(bool: Bool): Orelse[Nothing, Nothing] {
  if bool
  then Orelse[Nothing, Nothing].primary({})
  else Orelse[Nothing, Nothing].secondary({})
}
fun to_orelse[T](maybe: Maybe[T]): Orelse[T, Nothing] {
  if maybe is some(t)
  then Orelse[T, Nothing].primary(t)
  else Orelse[T, Nothing].secondary({})
}
fun to_orelse[O, E](result: Result[O, E]): Orelse[O, E] {
  switch result
  case ok(o) Orelse[O, E].primary(o)
  case error(e) Orelse[O, E].secondary(e)
}

| Assembly  
| In the end, all Martinaise code is lowered to x86_64 NASM-style assembly. A
| big downside of this is that Martinaise is not portable. An upside is that you
| can easily switch back and forth between Martinaise and assembly. Using the
| asm keyword, you can implement functions in assembly language. Because
| Martinaise is so low-level, it also implements its own memory layout and
| calling convention.
|
| Memory Layout  
| The memory layout depends on the type:
|
| - Opaque types define exactly how they are aligned.
| 
|   opaque U8 = 1 byte big, 1 byte aligned
|
|  - Struct types have an alignment equal to the biggest alignment of their
|   fields. All fields with a size that is a multiple of this alignment are
|   moved to the front. All other fields are ordered in a way to minimize the
|   overall size. You should not depend on the order of these other fields.
|
|  - Enum types contain the payload followed by a single byte indicating which
|   variant is active. The size reserved for the payload is the biggest size of
|   all the possible variant payloads.
|
| Here's an example of a more complex type:
|
| enum CType { char: U8, short: U16, int: U32, long: U64 }
| struct Foo {
|   value: U32,
|   flup: CType,
|   foo: &Foo,
|   baz: Maybe[Maybe[Str]],
|   blub: Map[Str, U64],
| }
|
| ▏0      ▏8      ▏16     ▏24     ▏32     ▏40     ▏48     ▏56     ▏64
| ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 65
| Foo
| foo     blub                    baz                 val…flup
| ▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓..▓▓▓▓░░░░░░░░░
| &Foo    Map[Str, U64]           Maybe[Maybe[Str]…│  U32 CType   │
|         buckets         size    some─────────────┤      char────┤
|         ░░░░░░░░░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░│      ░.......│
|         Slice[MapBucket…U64     Maybe[Str]      ││      …       │
|         data    len             some────────────┤│      short───┤
|         ░░░░░░░░▓▓▓▓▓▓▓▓        ░░░░░░░░░░░░░░░░││      ░░......│
|         &MapBuc…U64             Str             ││      U…      │
|                                 chars           ││      int─────┤
|                                 ░░░░░░░░░░░░░░░░││      ░░░░....│
|                                 Slice[Char]     ││      U32     │
|                                 data    len     ││      long────┘
|                                 ░░░░░░░░▓▓▓▓▓▓▓▓││      ░░░░░░░░
|                                 &Char   U64     ││      U64
|                                 none────────────┘│
|                                 ................ │
|                                 none─────────────┘
|                                 .................
|
| Calling Convention  
| Martinaise has its own calling convention. It is often less efficient than the
| cdecl and RISC-V calling conventions, but way simpler.
|
| - Registers  
|   Calling a function may change any register contents except the rsp (stack
|   pointer register). This means that functions are free to use any registers
|   they want for whatever purpose without first pushing contents onto the stack
|   and restoring them later on.
|
| - Arguments  
|   All arguments are passed on the stack. When a function starts executing, the
|   last value on the stack is the callee (the call instruction automatically
|   pushes it onto the stack). Below that is an address that indicates where the
|   return value should be saved to. Below that are the arguments, layed out as
|   if they were in an anonymous struct that is 8-byte aligned.
|
|   Example: foo(a: U16, b: U32, c: U32, d: U8) is called. When layouting a
|   struct containing a, b, c, and d its layout would look like this:
|
|   bbbbccccaad
|
|   This value is padded to a multiple of 8 bytes, so at the beginning of the
|   function execution, the stack looks like this:
|
|   [callee][return]bbbbccccaad.....[other stuff on the stack]
|   ▏       ▏       ▏       ▏       ▏
|   rsp    +8      +16     +24     +32
|
|   More notes about this:
|   - 1 character in this visualization represents one byte.
|   - The stack grows down to lower addresses, so the relevant parts are at the
|     lower addresses.
|   - The arguments all fulfill their alignment requirements.
|   - The arguments can be accessed like this:
|     - a: [rsp + 24]
|     - b: [rsp + 16]
|     - c: [rsp + 20]
|     - d: [rsp + 26]
|   - You can rely on the fact that all arguments with a size that is a multiple
|     of the highest alignment (4) are at the beginning in the order they were
|     declared (in this example, b and c). You should NOT depend on the order of
|     the other fields. This restrictions effectively prohibits you from
|     manually implementing asm functions that take multiple arguments with a
|     size that is not a multiple of the biggest alignment (such as this foo).
|     Instead, consider writing asm functions with arguments that are explicitly
|     of the same length and wrapping them with nicer-typed functions when
|     necessary.

| Syscalls  

fun syscall(number: U64, arg0: U64): U64 asm {
  ;        0       8       16      24      32
  ; stack: [callee][return][number][arg0  ]
  mov rax, [rsp + 16] ; syscall number
  mov rdi, [rsp + 24] ; argument 0
  syscall
  mov r8, [rsp + 8]
  mov [r8], rax ; write return value
  ret
}

fun syscall(number: U64, arg0: U64, arg1: U64): U64 asm {
  ;        0       8       16      24      32      40
  ; stack: [callee][return][number][arg0  ][arg1  ]
  mov rax, [rsp + 16] ; syscall number
  mov rdi, [rsp + 24] ; argument 0
  mov rsi, [rsp + 32] ; argument 1
  syscall
  mov r8, [rsp + 8]
  mov [r8], rax ; write return value
  ret
}

fun syscall(number: U64, arg0: U64, arg1: U64, arg2: U64): U64 asm {
  ;        0       8       16      24      32      40      48
  ; stack: [callee][return][number][arg0  ][arg1  ][arg2  ]
  mov rax, [rsp + 16] ; syscall number
  mov rdi, [rsp + 24] ; argument 0
  mov rsi, [rsp + 32] ; argument 1
  mov rdx, [rsp + 40] ; argument 2
  syscall
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}

| Halting, Exiting, and Panicking  

fun halt(): Never { loop {} }
fun exit(status: U64): Never { 60.syscall(status) halt() }
fun panic(message: Str): Never { stderr.writeln(message) exit(1) }
fun panic(): Never { panic("panicked") }
fun unreachable(): Never { panic("unreachable") }
fun todo(): Never { panic("todo") }
fun assert(condition: Bool) { assert(condition, "assert failed") }
fun assert(condition: Bool, message: Str) {
  if not(condition) then panic(message)
}

| Int  
| There are several integer types with different signedness and bit amount.
|
| If you just write a number such as 3 in the code, it's a U64 by default. You
| can be explicit about the type by using a suffix: 3:U8
|
| All integers also support the following mathematical operations:
| - add(Int, Int): Int
| - subtract(Int, Int): Int
| - multiply(Int, Int): Int
| - divide(Int, Int): Int
| - modulo(Int, Int): Int
| - and(Int, Int): Int
| - or(Int, Int): Int
| - xor(Int, Int): Int
| - compare_to(Int, Int): Ordering
| - to_<OtherInt>(Int): OtherInt, e.g. to_U8() for non-U8 ints

opaque U8  = 1 byte big,  1 byte aligned
opaque U16 = 2 bytes big, 2 bytes aligned
opaque U32 = 4 bytes big, 4 bytes aligned
opaque U64 = 8 bytes big, 8 bytes aligned
opaque I8  = 1 byte big,  1 byte aligned
opaque I16 = 2 bytes big, 2 bytes aligned
opaque I32 = 4 bytes big, 4 bytes aligned
opaque I64 = 8 bytes big, 8 bytes aligned

| For functions accepting two U64s:
|        0       8       16      24      32
| stack: [callee][return][a     ][b     ]
fun add(a: U64, b: U64): U64 asm {
  mov r8, [rsp + 16]
  add r8, [rsp + 24]
  mov r9, [rsp + 8]
  mov [r9], r8
  ret
}
fun subtract(a: U64, b: U64): U64 asm {
  mov r8, [rsp + 16]
  sub r8, [rsp + 24]
  mov r9, [rsp + 8]
  mov [r9], r8
  ret
}
fun multiply(a: U64, b: U64): U64 asm {
  mov r8, [rsp + 16]
  mul r8, [rsp + 24] ; TODO: doesn't work, result is double word
  mov r9, [rsp + 8]
  mov [r9], r8
  ret
}
fun divide(a: U64, b: U64): U64 asm {
  mov r8, [rsp + 16]
  div r8, [rsp + 24] ; TODO: doesn't work like this
  mov r9, [rsp + 8]
  mov [r9], r8
  ret
}
fun modulo(a: U64, b: U64): U64 asm {
  ; TODO: implement
  ;mov r8, [rsp + 16]
  ;div r8, [rsp + 24]
  ;mov r9, [rsp + 8]
  ;mov [r9], r8
  ret
}
fun compare_to(a: U64, b: U64): Ordering asm {
  mov r9, [rsp + 8]
  cmp [rsp + 16], [rsp + 24]
  je .equal
  jg .greater
  ; less
  mov [r9], 0 ; less
  jmp .end
.equal
  mov [r9], 1 ; equal
  jmp .end
.greater
  mov [r9], 2 ; greater
.end
  ret
}

fun inc(a: U8): U8 { a.add(1:U8) }
fun inc(a: U16): U16 { a.add(1:U16) }
fun inc(a: U32): U32 { a.add(1:U32) }
fun inc(a: U64): U64 { a.add(1:U64) }
fun inc(a: I8): I8 { a.add(1:I8) }
fun inc(a: I16): I16 { a.add(1:I16) }
fun inc(a: I32): I32 { a.add(1:I32) }
fun inc(a: I64): I64 { a.add(1:I64) }
fun dec(a: U8): U8 { a.subtract(1:U8) }
fun dec(a: U16): U16 { a.subtract(1:U16) }
fun dec(a: U32): U32 { a.subtract(1:U32) }
fun dec(a: U64): U64 { a.subtract(1:U64) }
fun dec(a: I8): I8 { a.subtract(1:I8) }
fun dec(a: I16): I16 { a.subtract(1:I16) }
fun dec(a: I32): I32 { a.subtract(1:I32) }
fun dec(a: I64): I64 { a.subtract(1:I64) }
fun equals(a: U8, b: U8): Bool { a.compare_to(b).is_equal() }
fun equals(a: U16, b: U16): Bool { a.compare_to(b).is_equal() }
fun equals(a: U32, b: U32): Bool { a.compare_to(b).is_equal() }
fun equals(a: U64, b: U64): Bool { a.compare_to(b).is_equal() }
fun equals(a: I8, b: I8): Bool { a.compare_to(b).is_equal() }
fun equals(a: I16, b: I16): Bool { a.compare_to(b).is_equal() }
fun equals(a: I32, b: I32): Bool { a.compare_to(b).is_equal() }
fun equals(a: I64, b: I64): Bool { a.compare_to(b).is_equal() }
fun hash(hasher: &Hasher, int: U8) { hasher.hash(int.to_U64()) }
fun hash(hasher: &Hasher, int: U16) { hasher.hash(int.to_U64()) }
fun hash(hasher: &Hasher, int: U32) { hasher.hash(int.to_U64()) }
fun hash(hasher: &Hasher, int: I8) { hasher.hash(int.to_U64()) }
fun hash(hasher: &Hasher, int: I16) { hasher.hash(int.to_U64()) }
fun hash(hasher: &Hasher, int: I32) { hasher.hash(int.to_U64()) }
fun hash(hasher: &Hasher, int: I64) { hasher.hash(int.to_U64()) }

fun write[W](writer: W, int: U8) { writer.write(radix(int, 10)) }
fun write[W](writer: W, int: U16) { writer.write(radix(int, 10)) }
fun write[W](writer: W, int: U32) { writer.write(radix(int, 10)) }
fun write[W](writer: W, int: U64) { writer.write(radix(int, 10)) }
fun write[W](writer: W, int: I64) {
  if int.is_less_than(0:I64)
  then writer."-{0:I64.subtract(int).to_U64()}"
  else writer."+{radix(int.to_U64(), 10)}"
}
fun radix(int: U64, radix: U64): RadixFormat { RadixFormat { radix, int } }
fun radix(int: U8, radix: U64): RadixFormat { radix(int.to_U64(), radix) }
fun radix(int: U16, radix: U64): RadixFormat { radix(int.to_U64(), radix) }
fun radix(int: U32, radix: U64): RadixFormat { radix(int.to_U64(), radix) }
struct RadixFormat { radix: U64, int: U64 }
fun write[W](writer: W, format: RadixFormat) {
  var divisor = 1
  loop {
    if format.int.divide(divisor).is_less_than(format.radix) then break
    divisor = divisor.multiply(format.radix)
  }
  loop {
    writer.write(
      format.int.divide(divisor).modulo(format.radix).to_U8().digit_to_char())
    if divisor.equals(1) then break
    divisor = divisor.divide(format.radix)
  }
}
fun digit_to_char(digit: U8): Char {
  if digit.is_greater_than(9:U8)
  then digit.subtract(10:U8).add(#a.byte).to_char()
  else digit.add(#0.byte).to_char()
}
fun parse_U64(str: Str): U64 {
  var num = 0
  for char in str do {
    if not(#0.until(#9).contains(char))
    then panic("non-digit in supposed number")
    num = num.multiply(10).add(char.subtract(#0).to_U64())
  }
  num
}

| Comparisons  
| You should implement a compare_to(T, T): Ordering function for types that can
| be compared. This allows you to use functions such as is_at_least or min.

enum Ordering { less, equal, greater }

fun is_less(ord: Ordering): Bool {
  switch ord case less true case equal false case greater false
}
fun is_equal(ord: Ordering): Bool {
  switch ord case less false case equal true case greater false
}
fun is_greater(ord: Ordering): Bool {
  switch ord case less false case equal false case greater true
}
fun is_less_or_equal(ord: Ordering): Bool {
  switch ord case less true case equal true case greater false
}
fun is_greater_or_equal(ord: Ordering): Bool {
  switch ord case less false case equal true case greater true
}
fun equals(a: Ordering, b: Ordering): Bool {
  switch a
  case less b.is_less()
  case equal b.is_equal()
  case greater b.is_greater()
}

fun hash(hasher: &Hasher, ord: Ordering) {
  hasher.hash(switch ord case less #l case equal #e case greater #g)
}
fun write[W](writer: W, ord: Ordering) {
  writer.write(
    switch ord case less "less" case equal "equal" case greater "greater"
  )
}

fun is_less_than[T](a: T, b: T): Bool { a.compare_to(b).is_less() }
fun is_greater_than[T](a: T, b: T): Bool { a.compare_to(b).is_greater() }
fun is_at_least[T](a: T, b: T): Bool { a.compare_to(b).is_greater_or_equal() }
fun is_at_most[T](a: T, b: T): Bool { a.compare_to(b).is_less_or_equal() }

fun min[T](a: T, b: T): T { if a.is_less_than(b) then a else b }
fun max[T](a: T, b: T): T { if a.is_greater_than(b) then a else b }

| Memory  
| Martinaise supports references: &T is a reference to a T. You can get a
| reference to a value using the expr.& syntax. You can follow a reference
| using the expr.* syntax.
| The builtin libc functions work with addresses (U64) instead of references.
| These addresses don't have any information about what kind of object is stored
| at the address.

fun size_of_type[T](): U64 { ... }
| fun libc_malloc(size: U64): U64 { ... }
| fun to_address[T](ref: &T): U64 { ... }
| fun to_reference[T](address: U64): &T { ... }

fun malloc(size: U64): U64 {
  var address = libc_malloc(size)
  if address.equals(0) then panic("out of memory")
  address
}
fun uninitialized[T](): &T { malloc(size_of_type[T]()).to_reference[T]() }
fun put_on_heap[T](value: T): &T {
  var ref = uninitialized[T]()
  ref.* = value
  ref
}
fun add_offset[T](ref: &T, offset: U64): &T {
  ref.to_address().add(offset.multiply(size_of_type[T]())).to_reference[T]()
}
fun swap[T](a: &T, b: &T) {
  var tmp = a.*
  a.* = b.*
  b.* = tmp
}
| Casts an A to a B by reinterpreting the memory of A. This is very unsafe, so
| only use it if you know what you're doing.
fun cast[A, B](a: A): B {
  | at least a small sanity check
  assert(
    size_of_type[A]().equals(size_of_type[B]()),
    "cast between types of different sizes",
  )
  a.&.to_address().to_reference[B]().*
}

fun write_address[W](writer: W, address: U64) {
  | max U64 is 18_446_744_073_709_551_615
  var divisor = 1_152_921_504_606_846_976 | 16 ^ something
  writer."0x"
  loop {
    writer.write(address.divide(divisor).modulo(16).to_U8().digit_to_char())
    if divisor.equals(1) then break
    divisor = divisor.divide(16)
  }
}

| Slice  
| A slice refers to a memory region where values of the same type are right next
| to each other. A slice has a pointer to the first element as well as a length.
|
| [  item  ][  item  ][  item  ][  item  ]
| ^
| len 4

struct Slice[T] { data: &T, len: U64 }

fun empty_slice[T](): Slice[T] { Slice { data = 0.to_reference[T](), len = 0 } }
fun uninitialized_slice[T](len: U64): Slice[T] {
  if len.equals(0) then return empty_slice[T]()
  var data = malloc(len.multiply(size_of_type[T]())).to_reference[T]()
  Slice { data, len }
}
fun filled_slice[T](len: U64, fill: T): Slice[T] {
  var slice = uninitialized_slice[T](len)
  for i in 0.to(len) do slice.get_ref(i).* = fill
  slice
}

fun is_empty[T](slice: Slice[T]): Bool { slice.len.equals(0) }
fun get[T](slice: Slice[T], index: U64): T { slice.get_ref(index).* }
fun get_ref[T](slice: Slice[T], index: U64): &T {
  0.to(slice.len).contains(index) orelse panic("index out of bounds")
  slice.data.add_offset(index)
}

fun compare_to[T](a: Slice[T], b: Slice[T]): Ordering {
  var i = 0
  loop {
    if i.equals(a.len).and(i.equals(b.len)) then return Ordering.equal
    if i.equals(a.len) then return Ordering.less
    if i.equals(b.len) then return Ordering.greater
    var ord = a.get(i).compare_to(b.get(i))
    if not(ord.is_equal()) then return ord
    i = i.inc()
  }
}
fun equals[T](a: Slice[T], b: Slice[T]): Bool {
  a.len.equals(b.len) orelse return false
  | TODO: support types that only have equals, not compare_to
  compare_to(a, b).is_equal()
}
fun hash[T](hasher: &Hasher, slice: Slice[T]) { hasher.hash_all(slice) }
fun write[W, T](writer: W, slice: Slice[T]) {
  writer.write("[{comma_separated(slice)}]")
}

fun iter[T](slice: Slice[T]): Iter[T, _] {
  SliceIter[T] { slice, index = 0 }.wrap_in_iter[T, SliceIter[T]]()
}
struct SliceIter[T] { slice: Slice[T], index: U64 }
fun next[T](iter: &SliceIter[T]): Maybe[T] {
  var item =
    if iter.index.is_less_than(iter.slice.len)
    then some(iter.slice.get(iter.index))
    else none[T]()
  iter.index = iter.index.add(1)
  item
}

fun rev_iter[T](slice: Slice[T]): Iter[T, _] {
  SliceRevIter { slice, index = slice.len }.wrap_in_iter[T, SliceRevIter[T]]()
}
struct SliceRevIter[T] {
  slice: Slice[T],
  index: U64, | last yielded item
}
fun next[T](iter: &SliceRevIter[T]): Maybe[T] {
  if iter.index.is_greater_than(0) then {
    iter.index = iter.index.subtract(1)
    some[T](iter.slice.get(iter.index))
  } else none[T]()
}

fun copy_to[T](from: Slice[T], to: Slice[T]) {
  assert(from.len.equals(to.len), "copy_to slice lens don't match")
  for i in 0.to(from.len) do to.get_ref(i).* = from.get(i)
}
fun subslice[T](slice: Slice[T], from: U64, to: U64): Slice[T] {
  assert(to.is_at_most(slice.len), "subslice needs to be inside original slice")
  Slice { data = slice.data.add_offset(from), len = to.subtract(from) }
}
fun first[T](slice: Slice[T]): T {
  assert(slice.is_not_empty(), "first only works on non-empty slices")
  slice.get(0)
}
fun first[T](slice: Slice[T], amount: U64): Slice[T] {
  assert(amount.is_at_most(slice.len), "first amount too big")
  slice.subslice(0, amount)
}
fun last[T](slice: Slice[T]): T {
  assert(slice.is_not_empty(), "last only works on non-empty slices")
  slice.get(slice.len.dec())
}
fun last[T](slice: Slice[T], amount: U64): Slice[T] {
  assert(amount.is_at_most(slice.len), "last amount too big")
  slice.subslice(slice.len.subtract(amount), slice.len)
}
fun without_first[T](slice: Slice[T], amount: U64): Slice[T] {
  assert(amount.is_at_most(slice.len), "without_first amount too big")
  slice.subslice(amount, slice.len)
}
fun without_last[T](slice: Slice[T], amount: U64): Slice[T] {
  assert(amount.is_at_most(slice.len), "without_last amount too big")
  slice.subslice(0, slice.len.subtract(amount))
}
fun starts_with[T](slice: Slice[T], prefix: Slice[T]): Bool {
  slice.len.is_at_least(prefix.len) orelse return false
  slice.first(prefix.len).equals(prefix)
}
fun ends_with[T](slice: Slice[T], suffix: Slice[T]): Bool {
  slice.len.is_at_least(suffix.len) orelse return false
  slice.last(suffix.len).equals(suffix)
}
fun trim_prefix[T](slice: &Slice[T], prefix: Slice[T]): Bool {
  var matches = slice.starts_with(prefix)
  if matches then slice.* = slice.without_first(prefix.len)
  matches
}
fun trim_suffix[T](slice: &Slice[T], suffix: Slice[T]): Bool {
  var matches = slice.ends_with(suffix)
  if matches then slice.* = slice.without_last(suffix.len)
  matches
}

fun sort[T](slice: &Slice[T]) {
  | quick sort
  if slice.len.is_at_most(1) then return {}
  var pivot = slice.get(slice.len.dec())
  var i = 0
  for j in 0.to(slice.len) do
    if slice.get(j).is_less_than(pivot) then {
      i = i.inc()
      swap(slice.get_ref(i.dec()), slice.get_ref(j))
    }
  swap(slice.get_ref(i), slice.get_ref(slice.len.dec()))
  sort(slice.subslice(0, i).&)
  sort(slice.subslice(min(i.inc(), slice.len.dec()), slice.len).&)
}

| Strings & Chars  
| A Char (short for Character) is a wrapper around a U8. When you write
| something like #a in your code, that gets turned into a Char. Don't confuse
| the Char with a Unicode code point, grapheme cluster, or anything like that.
| This is as much a "character" as the C char. But who are we to judge?
| Character is a heavily overloaded term anyways.
| Similarly, a Str (short for String) is just a wrapper around a Slice[U8] and
| it's what you get from string literals such as "blub". Try printing it! It
| formatted nicely.
| Finally, OsStr is a string useful for operating system APIs – basically a
| char*. You can't efficiently get the length or do many interesting operations
| on it. It's null-terminated.

struct Char { byte: U8 }
struct Str { chars: Slice[Char] }
struct OsStr { address: U64 } | null-terminated

fun to_char(byte: U8): Char { Char { byte } }

fun to_str(chars: Slice[Char]): Str { Str { chars } }
fun to_str(bytes: Slice[U8]): Str {
  Str { chars = bytes.cast[Slice[U8], Slice[Char]]() }
}
fun to_str(chars: Vec[Char]): Str { Str { chars = chars.to_slice() } }
fun bytes(str: Str): Slice[U8] { str.chars.cast[Slice[Char], Slice[U8]]() }

fun to_os_str(str: Str): OsStr {
  | make it null-terminated
  var bytes = uninitialized_slice[U8](str.len().inc())
  str.bytes().copy_to(bytes.subslice(0, str.len()))
  bytes.get_ref(str.len()).* = 0:U8
  OsStr { address = bytes.data.to_address() }
}
fun to_str(str: OsStr): Str {
  var len = 0
  loop
    if str.address.to_reference[U8]().add_offset(len).*.equals(0)
    then break
    else len = len.inc()
  Str { chars = Slice { data = str.address.to_reference[Char](), len } }
}

fun parse_digit(char: Char): U8 {
  if #0.to(#9).contains(char.byte) then return char.byte.subtract(#0.byte)
  if #a.to(#z).contains(char.byte) then return char.byte.subtract(#a.byte).add(16)
  if #A.to(#Z).contains(char.byte) then return char.byte.subtract(#A.byte).add(16)
  panic("not a digit")
}
fun compare_to(a: Char, b: Char): Ordering { a.byte.compare_to(b.byte) }
fun equals(a: Char, b: Char): Bool { a.byte.equals(b.byte) }
fun hash(hasher: &Hasher, char: Char) { hasher.hash(char.byte) }
fun write[W](writer: W, char: Char) { writer.write_byte(char.byte) }
fun inc(char: Char): Char { Char { byte = char.byte.inc() } }
fun dec(char: Char): Char { Char { byte = char.byte.dec() } }
fun add(char: Char, delta: U8): Char { Char { byte = char.byte.add(delta) } }
fun subtract(char: Char, delta: U8): Char {
  Char { byte = char.byte.subtract(delta) }
}
fun subtract(char: Char, other: Char): U8 { char.byte.subtract(other.byte) }

fun string_builder(): StringBuilder { StringBuilder { chars = vec[Char]() } }
struct StringBuilder { chars: Vec[Char] }
fun write_byte(builder: &StringBuilder, byte: U8) {
  builder.chars.&.push(Char { byte })
}
fun write_bytes(builder: &StringBuilder, bytes: Slice[U8]) {
  for byte in bytes do builder.write_byte(byte)
}
fun len(builder: StringBuilder): U64 { builder.chars.len }
fun truncate_to_len(builder: &StringBuilder, len: U64) {
  assert(len.is_at_most(builder.chars.len))
  builder.chars.len = len
}
fun to_str(builder: StringBuilder): Str {
  Str { chars = builder.chars.to_slice() }
}

fun len(str: Str): U64 { str.chars.len }
fun is_empty(str: Str): Bool { str.len().equals(0) }
fun get(str: Str, index: U64): Char { str.get_ref(index).* }
fun get_ref(str: Str, index: U64): &Char {
  0.to(str.len()).contains(index) orelse panic("index out of bounds")
  str.chars.get_ref(index)
}

fun compare_to(a: Str, b: Str): Ordering {
  var i = 0
  loop {
    if i.equals(a.len()).and(i.equals(b.len())) then return Ordering.equal
    if i.equals(a.len()) then return Ordering.less
    if i.equals(b.len()) then return Ordering.greater
    var ord = a.get(i).compare_to(b.get(i))
    if not(ord.is_equal()) then return ord
    i = i.inc()
  }
}
fun equals(a: Str, b: Str): Bool {
  if a.len().equals(b.len()) then compare_to(a, b).is_equal() else false
}
fun hash(hasher: &Hasher, str: Str) { hasher.hash(str.chars) }
fun write[W](writer: W, str: Str) { writer.write_bytes(str.bytes()) }

fun iter(str: Str): Iter[Char, _] {
  StrIter { str, index = 0 }.wrap_in_iter[Char, StrIter]()
}
struct StrIter { str: Str, index: U64 }
fun next(iter: &StrIter): Maybe[Char] {
  if iter.index.is_less_than(iter.str.len())
  then {
    var char = iter.str.chars.get(iter.index)
    iter.index = iter.index.inc()
    some(char)
  }
  else none[Char]()
}

fun substr(str: Str, from: U64, to: U64): Str {
  to.is_at_most(str.len())
    orelse panic("substr needs to be inside original str")
  Str { chars = str.chars.subslice(from, to) }
}
fun first(str: Str): Char {
  assert(str.is_not_empty(), "first only works on non-empty strs")
  str.get(0)
}
fun first(str: Str, amount: U64): Str {
  assert(amount.is_at_most(str.len()), "first amount too big")
  str.substr(0, amount)
}
fun last(str: Str): T {
  assert(str.is_not_empty(), "last only works on non-empty strs")
  str.get(str.len().dec())
}
fun last(str: Str, amount: U64): Str {
  assert(amount.is_at_most(str.len()), "last amount too big")
  str.substr(str.len().subtract(amount), str.len())
}
fun without_first(str: Str, amount: U64): Str {
  assert(amount.is_at_most(str.len()), "without_first amount too big")
  str.substr(amount, str.len())
}
fun without_last(str: Str, amount: U64): Str {
  assert(amount.is_at_most(str.len()), "without_last amount too big")
  str.substr(0, str.len().subtract(amount))
}
fun starts_with(str: Str, prefix: Str): Bool {
  str.chars.starts_with(prefix.chars)
}
fun ends_with(str: Str, suffix: Str): Bool {
  str.chars.ends_with(suffix.chars)
}
fun trim_prefix(str: &Str, prefix: Str) {
  assert(str.starts_with(prefix), "trim_prefix doesn't match prefix")
  str.* = str.without_first(prefix.len())
}
fun trim_suffix(str: &Str, suffix: Str) {
  assert(str.ends_with(suffix), "trim_suffix doesn't match suffix")
  str.* = str.without_last(suffix.len())
}
fun split(str: Str, separator: Str): Slice[Str] {
  var parts = vec[Str]()
  for part in str.iter().split(separator.chars) do parts.&.push(part.to_str())
  parts.to_slice()
}
fun lines(slice: Str): Slice[Str] { slice.split("{newline}") }
fun pad_right(str: Str, len: U64, char: Char): Str {
  var string = string_builder().&
  string.write(str)
  loop if string.len().is_less_than(len) then string.write(char) else break
  string.to_str()
}

| Range  
| Ranges have an inclusive start and exclusive end value.

struct Range[T] { start: T, end: T }

fun to[T](start: T, end: T): Range[T] { Range { start, end } }
fun until[T](start: T, end: T): Range[T] { Range { start, end = end.inc() } }
fun range_by[T](start: T, len: T): Range[T] {
  Range { start, end = start.add(len) }
}

fun contains[T](range: Range[T], value: T): Bool {
  value.is_at_least(range.start).and(value.is_less_than(range.end))
}
fun is_empty[T](range: Range[T]): Bool { range.start.is_at_least(range.end) }

fun iter[T](range: Range[T]): Iter[T, _] {
  RangeIter { rest = range }.wrap_in_iter[T, RangeIter[T]]()
}
struct RangeIter[T] { rest: Range[T] }
fun next[T](iter: &RangeIter[T]): Maybe[T] {
  if iter.rest.is_empty() then none[T]() else {
    var current = iter.rest.start
    iter.rest.start = current.inc()
    some(current)
  }
}

| Iterating  
| Martinaise supports for loops for iterating. They are just syntactic sugar for
| calling an iter() function and then repeatedly calling next() on the result:
|
| for a in b do ...
|
| $iter = b.iter().&
| loop switch $iter.next() case none break case some(a) {
|   ...
| }
|
| Because Martinaise has no concept of traits or constraints, defining methods
| for iterators becomes difficult: You want it to work on all iterators, but
| defining a method such as split[I](iter: I) means that you can call split on
| every single type now, polluting the namespace. Also, you can't constrain the
| item type: What if you want to offer a new function only on iterators which
| yield U8s?
| That's why there's a wrapper struct Iter[T, I], which just wraps an actual
| iterator implementation and delegates next() to it. The T is not used or
| constrained by the type system, but things fail if I.next() doesn't return a
| Maybe[T] – the T is a poor man's associated type, if you will.
| Methods that return an iterator can use the wrap_in_iter() function to make
| all the iterator functions available.
|
| When you chain iterators together, you actually just nest the types. Take this
| example:
| 
| zip("Hello".iter().enumerate(), "world".iter())
| 
| Here, "Hello".iter() and "world".iter() return an Iter[Char, StrIter]. The
| enumerate() gets the inner StrIter, wraps it in an EnumeratedIter and re-wraps
| it in an Iter to an Iter[Enumerated[Char], EnumeratedIter[Char, StrIter]].
| Finally, the zip() unwraps both Iters and creates an Iter with a ZipIter,
| resulting in this:
| 
| Iter[
|   Tuple2[Enumerated[Char], Char],
|   ZipIter[Enumerated[Char], Char, EnumeratedIter[Char, StrIter], StrIter],
| ]

struct Iter[T, I] { inner: I }

fun wrap_in_iter[T, I](inner: I): Iter[T, I] {
  | TODO: typecheck once you can write types on vars
  | if false() then var t: Maybe[T] = inner.next()
  Iter[T, I] { inner }
}
fun iter[T, I](iter: Iter[T, I]): Iter[T, I] { iter }
fun next[T, I](iter: &Iter[T, I]): Maybe[T] { iter.inner.&.next() }

fun is_empty[T, I](iter: &Iter[T, I]): Bool { iter.next().is_none() }

| Skips the given amount of elements on the inner iter, then acts like the inner
| iter.
fun skip[T, I](iter: Iter[T, I], amount: U64): Iter[T, _] {
  SkipIter[T, I] { inner = iter.inner, amount }.wrap_in_iter[T, SkipIter[T]]()
}
struct SkipIter[T, I] { inner: I, amount: U64 }
fun next[T, I](iter: &SkipIter[T, I]): Maybe[T] {
  for i in 0.to(iter.amount) do {
    var next = iter.inner.&.next()
    if next is none then return next
  }
  iter.amount = 0
  iter.inner.&.next()
}

| Takes the given amount of elements, then ends.
fun take[T, I](iter: Iter[T, I]): Iter[T, _] {
  TakeIter[T, I] { inner = iter.inner, amount }.wrap_in_iter[T, TakeIter[T]]()
}
struct TakeIter[T, I] { inner: I, amount: U64 }
fun next[T, I](iter: &TakeIter[T, I]): Maybe[T] {
  if iter.amount.is_greater_than(0)
  then {
    iter.amount = iter.amount.dec()
    iter.inner.&.next()
  }
  else none[T]()
}

| Zips two iters of equal length.
fun zip[A, B, IA, IB](a: Iter[A, IA], b: Iter[B, IB]): Iter[Tuple2[A, B], _] {
  ZipIter[A, B, IA, IB] { a = a.inner, b = b.inner }
    .wrap_in_iter[Tuple2[A, B], ZipIter[A, B, IA, IB]]()
}
struct ZipIter[A, B, IA, IB] { a: IA, b: IB }
fun next[A, B, IA, IB](iter: &ZipIter[A, B, IA, IB]): Maybe[Tuple2[A, B]] {
  switch iter.a.&.next()
  case some(a) {
    switch iter.b.&.next()
    case none panic("zip iters have unequal length")
    case some(b) some(tuple(a, b))
  }
  case none {
    switch iter.b.&.next()
    case some panic("zip iters have unequal length")
    case none none[Tuple2[A, B]]()
  }
}

| Wraps items in Enumerated[T], which also has an index.
fun enumerate[T, I](iter: Iter[T, I]): Iter[Enumerated[T], _] {
  EnumeratedIter[T, I] { inner = iter.inner, index = 0 }
    .wrap_in_iter[Enumerated[T], EnumeratedIter[T, I]]()
}
struct Enumerated[T] { index: U64, item: T }
struct EnumeratedIter[T, I] { inner: I, index: U64 }
fun next[T, I](iter: &EnumeratedIter[T, I]): Maybe[Enumerated[T]] {
  switch iter.inner.&.next()
  case some(item) {
    var index = iter.index
    iter.index = iter.index.inc()
    some(Enumerated { index, item })
  }
  case none none[Enumerated[T]]()
}
fun write[W, T](writer: W, enumerated: Enumerated[T]) {
  writer."({enumerated.index}: {enumerated.item})"
}

| Gets the element at the given index.
fun get[T, I](iter: &Iter[T, I], index: U64): T {
  iter.get_maybe(index).unwrap()
}
fun get_maybe[T, I](iter: &Iter[T, I], index: U64): Maybe[T] {
  iter.skip(index).get()
}

| Finds the needle in the iter, returning its position.
fun find[T, I](iter: &Iter[T, I], needle: T): Maybe[U64] {
  for en in iter.enumerated() do
    if en.item.equals(needle) then return some(en.index)
  none[U64]()
}

| Splits an Iter at the given items forming a separator.
fun split[T, I](iter: Iter[T, I], separator: Slice[T]): Iter[Slice[T], _] {
  SplitIter { inner = iter.inner, separator }
    .wrap_in_iter[Slice[T], SplitIter[T, I]]()
}
struct SplitIter[T, I] { inner: I, separator: Slice[T] }
fun next[T, I](self: &SplitIter[T, I]): Maybe[Slice[T]] {
  var current = vec[T]()
  loop
    switch self.inner.&.next()
    case none
      if current.len.is_greater_than(0)
      then return some(current.to_slice())
      else return none[Slice[T]]()
    case some(item) {
      current.&.push(item)
      if current.to_slice().ends_with(self.separator)
      then return some(current.to_slice().without_last(self.separator.len))
    }
}

| Splits an Iter at the given separator.
fun split[T, I](iter: Iter[T, I], separator: T): Iter[Slice[T], _] {
  iter.split(vec(separator).to_slice())
}

| fun starts_with[T](slice: Slice[T], prefix: Slice[T]): Bool {
|   if prefix.len.is_greater_than(slice.len) then return false
|   for i in 0.to(prefix.len) do
|     if not(slice.get(i).equals(prefix.get(i))) then return false
|   true
| }

| fun split(str: Str, separator: Str): Slice[Str] {
|   var parts = vec[Str]()
|   for part in str.iter().iter_split(separator) do parts.&.push(part)
|   parts.to_slice()
| }
| fun lines(slice: Str): Slice[Str] { slice.split("
| ") }
| fun trim_prefix(str: &Str, prefix: Str) {
|   str.starts_with(prefix) orelse panic("str doesn't start with prefix")
|   str.* = str.substr(prefix.len)
| }


| Files, Input & Output  
| In C, a common way to work with files is with fopen, fclose, and similar
| functions, which work with FILE* pointers. The FILE struct internally contains
| a file descriptor, a small integer that's a handle to the file object in the
| operating system kernel.
| Martinaise doesn't use the FILE functions and instead works with file
| descriptors using some libc functions (open, read, write, close). To make the
| API type-safe, Martinaise has it's own wrapper around a file descriptor, the
| File type.
|
| For future-me reading through the code here, some general notes on files:
|
| The open function takes a filename, flags, and a mode. There are several kinds
| of flags:
| - File access mode flags
|   - RDONLY: Open for read only.
|   - WRONLY: Open for write only.
|   - RDWR: Open for both reading and writing.
| - Open-time flags
|   - CREAT: The file will be created if it doesn't already exist. Uses the mode
|     for specifying file permissions.
|   - TRUNC: Truncates the file to zero length after opening.
|   - ...
| - I/O operating modes
|   - APPEND: Every write on that file descriptor will append to the end of the
|     file, regardless of the current file position.
|   - FSYNC: Each write call will make sure data is reliably stored on disk
|     before returning.
|   - ...
| The mode is only used when creating a file. It uses the same format for file
| permissions as chmod (0o666 means read and write access for everyone).
|
| Files can also be opened in an asynchronous mode where you can poll the
| operating system for reads and writes. But then you have to maintain an event
| loop yourself and everything gets much more complicated. Here, I only use the
| blocking version.
|
| The flag constants are taken from the Zig implementation. The open-time flags
| and I/O operating modes flags are specific to x86.
|
| https://www.gnu.org/software/libc/manual/html_node/Opening-and-Closing-Files.html

fun libc_open(filename: U64, flags: U64, mode: U64): U64 { ... }
fun libc_read(file: U64, buf: U64, len: U64): U64 { ... }
fun libc_write(file: U64, buf: U64, len: U64): U64 { ... }
fun libc_close(file: U64): U8 { ... }

fun libc_open_flag_rdonly(): U64 { 8#0000 }
fun libc_open_flag_wronly(): U64 { 8#0001 }
fun libc_open_flag_rdwr(): U64   { 8#0002 }
fun libc_open_flag_create(): U64 { 8#0100 }
fun libc_open_flag_trunc(): U64  { 8#1000 }
fun libc_open_flag_append(): U64 { 8#2000 }

struct File { descriptor: U64 }

enum OpenFileFlag { read, write, create, truncate, append }
fun hash(hasher: &Hasher, flag: OpenFileFlag) {
  hasher.hash(
    switch flag
    case read 0
    case write 1
    case create 2
    case truncate 3
    case append 4
  )
}
fun equals(a: OpenFileFlag, b: OpenFileFlag): Bool {
  switch a
  case read if b is read then true else false
  case write if b is write then true else false
  case create if b is create then true else false
  case truncate if b is truncate then true else false
  case append if b is append then true else false
}

fun open_file(
  filename: Str, flags: Set[OpenFileFlag], mode: U64
): Maybe[File] {
  var os_flags = 0
  os_flags = os_flags.or(
    if flags.contains(OpenFileFlag.read) then
      if flags.contains(OpenFileFlag.write)
      then libc_open_flag_rdwr()
      else libc_open_flag_rdonly()
    else
      if flags.contains(OpenFileFlag.write)
      then libc_open_flag_wronly()
      else panic("must read or write")
  )
  if flags.contains(OpenFileFlag.create)
  then os_flags = os_flags.or(libc_open_flag_create())
  if flags.contains(OpenFileFlag.truncate)
  then os_flags = os_flags.or(libc_open_flag_trunc())
  if flags.contains(OpenFileFlag.append)
  then os_flags = os_flags.or(libc_open_flag_append())

  var fd = libc_open(
    filename.to_os_str().address,
    os_flags,
    mode,
  )
  if fd.equals(0) then none[File]() else some(File { descriptor = fd })
}

fun read(file: File, buffer: Slice[U8]): U64 {
  libc_read(file.descriptor, buffer.data.to_address(), buffer.len)
}
fun read_byte(file: File): Maybe[U8] {
  var c = 0:U8
  if libc_read(file.descriptor, c.&.to_address(), 1).equals(0)
  then none[U8]()
  else some(c)
}

fun write_bytes(file: File, buffer: Slice[U8]) {
  loop {
    if buffer.is_empty() then break
    var written =
      libc_write(file.descriptor, buffer.data.to_address(), buffer.len)
    buffer = buffer.without_first(written)
  }
}
fun write_byte(file: File, byte: U8) {
  libc_write(file.descriptor, byte.&.to_address(), 1).ignore()
}

fun close(file: File) { libc_close(file.descriptor).ignore() }

fun read_file(name: Str): Slice[U8] {
  var file = open_file(name, vec(OpenFileFlag.read).to_set(), 0)
    orelse panic("unable to open file")
  var content = vec[U8]()
  loop {
    var byte = file.read_byte() orelse break
    content.&.push(byte)
  }
  file.close()
  content.to_slice()
}
fun write_file(name: Str, content: Slice[U8]) {
  var file = open_file(
    name,
    vec(OpenFileFlag.write, OpenFileFlag.create, OpenFileFlag.truncate)
      .to_set(),
    8#666 | read and write access for everyone
  ) orelse panic("unable to open file")
  for byte in content do file.write_byte(byte)
  file.close()
}

| Printing  
| You should implement a write[Writer](Writer, T) function for types that can be
| printed. Writers are anything that has a write_byte(Writer, U8) function and a
| write_bytes(Writer, Slice[U8]) function.
| TODO: Use libc_write function more efficiently (not 1 byte per syscall)

var stdin = File { descriptor = 0 }
var stdout = File { descriptor = 1 }
var stderr = File { descriptor = 2 }

fun format[T](value: T): Str { "{value}" }

fun writeln[W](writer: W) { writer.write(newline) }
fun writeln[W, T](writer: W, value: T) { writer.write(value) writer.writeln() }

fun comma_separated[I](iter: I): CommaSeparatedFormat[I] {
  CommaSeparatedFormat { iter }
}
struct CommaSeparatedFormat[I] { iter: I }
fun write[W, T](writer: W, format: CommaSeparatedFormat[T]) {
  var first = true
  for item in format.iter do {
    if first then first = false else writer.write(", ")
    writer.write(item)
  }
}

fun print[T](value: T) { stdout.write(value) }
fun println() { print(newline) }
fun println[T](value: T) { print(value) println() }

fun eprint[T](value: T) { stderr.write(value) }
fun eprintln() { eprint(newline) }
fun eprintln[T](value: T) { eprint(value) eprintln() }

var newline = 10:U8.to_char()
var tab = 9:U8.to_char()

fun buffered_writer[W](writer: W, capacity: U64): BufferedWriter[W] {
  assert(capacity.is_greater_than(0))
  BufferedWriter {
    buffer = filled_slice(capacity, 0:U8), len = 0, inner = writer
  }
}
struct BufferedWriter[W] { buffer: Slice[U8], len: U64, inner: W }
fun flush[W](self: &BufferedWriter[W]) {
  self.inner.write_bytes(self.buffer.first(self.len))
  self.len = 0
}
fun amount_free[W](self: BufferedWriter[W]): U64 {
  self.buffer.len.subtract(self.len)
}
fun write_byte[W](self: &BufferedWriter[W], byte: U8) {
  if self.amount_free().equals(0) then self.flush()
  self.buffer.get_ref(self.len).* = byte
  self.len = self.len.inc()
}
fun write_bytes[W](self: &BufferedWriter[W], bytes: Slice[U8]) {
  if bytes.len.is_at_most(self.amount_free())
  then for byte in bytes do self.write_byte(byte)
  else {
    self.flush()
    if bytes.len.is_at_most(self.amount_free())
    then for byte in bytes do self.write_byte(byte)
    else self.inner.write_bytes(bytes)
  }
}

| Tuples  
fun tuple[A, B](a: A, b: B): Tuple2[A, B] { Tuple2 { a, b } }
fun tuple[A, B, C](a: A, b: B, c: C): Tuple3[A, B, C] { Tuple3 { a, b, c } }
struct Tuple2[A, B] { a: A, b: B }
struct Tuple3[A, B, C] { a: A, b: B, c: C }
fun write[W, A, B](writer: W, tuple: Tuple2[A, B]) {
  writer."({tuple.a}, {tuple.b})"
}
fun writer[W, A, B, C](writer: W, tuple: Tuple3[A, B, C]) {
  writer."({tuple.a}, {tuple.b}, {tuple.c})"
}

| Point  
struct Point[T] { x: T, y: T }
fun write[W, T](writer: W, point: Point[T]) {
  writer.write(tuple(point.x, point.y))
}

| Vec  
| A growable array where you can efficiently push and pop data to/from the back.
| This is implemented using a fixed-size slice. Once it fills up, a new slice is
| allocated and the old items are copied over.

struct Vec[T] { data: Slice[T], len: U64 }

fun vec[T](): Vec[T] { Vec { data = empty_slice[T](), len = 0 } }
| TODO: remove when there are slice literals
fun vec[T](a: T): Vec[T] { var v = vec[T]().& v.push(a) v.* }
fun vec[T](a: T, b: T): Vec[T] { var v = vec[T]().& v.push(a) v.push(b) v.* }
fun vec[T](a: T, b: T, c: T): Vec[T] {
  var v = vec[T]().& v.push(a) v.push(b) v.push(c) v.*
}
fun vec[T](a: T, b: T, c: T, d: T): Vec[T] {
  var v = vec[T]().& v.push(a) v.push(b) v.push(c) v.push(d) v.*
}
fun vec[T](a: T, b: T, c: T, d: T, e: T): Vec[T] {
  var v = vec[T]().& v.push(a) v.push(b) v.push(c) v.push(d) v.push(e) v.*
}
fun vec[T](a: T, b: T, c: T, d: T, e: T, f: T): Vec[T] {
  var v = vec[T]().& v.push(a) v.push(b) v.push(c) v.push(d) v.push(e) v.push(f)
  v.*
}
fun vec[T](a: T, b: T, c: T, d: T, e: T, f: T, g: T): Vec[T] {
  var v = vec[T]().& v.push(a) v.push(b) v.push(c) v.push(d) v.push(e) v.push(f)
  v.push(g) v.*
}
fun vec[T](a: T, b: T, c: T, d: T, e: T, f: T, g: T, h: T): Vec[T] {
  var v = vec[T]().& v.push(a) v.push(b) v.push(c) v.push(d) v.push(e) v.push(f)
  v.push(g) v.push(h) v.*
}

fun push[T](vec: &Vec[T], item: T) {
  if vec.data.len.equals(0) then vec.data = uninitialized_slice[T](8)
  if vec.data.len.equals(vec.len) then {
    var new_data = uninitialized_slice[T](vec.data.len.multiply(2))
    vec.data.copy_to(new_data.subslice(0, vec.data.len))
    vec.data = new_data
  }
  vec.data.get_ref(vec.len).* = item
  vec.len = vec.len.add(1)
}
fun push_all[T](vec: &Vec[T], items: Slice[T]) {
  for item in items do vec.push(item)
}
fun pop[T](vec: &Vec[T]): T {
  if vec.len.equals(0) then panic("called pop on empty Vec")
  vec.len = vec.len.dec()
  vec.data.get(vec.len)
}
fun get[T](vec: Vec[T], index: U64): T { vec.data.get(index) }
fun get_ref[T](vec: Vec[T], index: U64): &T { vec.data.get_ref(index) }
fun is_empty[T](vec: Vec[T]): Bool { vec.len.equals(0) }
fun to_slice[T](vec: Vec[T]): Slice[T] { vec.data.subslice(0, vec.len) }

fun equals[T](a: Vec[T], b: Vec[T]): Bool { a.to_slice().equals(b.to_slice()) }
fun iter[T](vec: Vec[T]): Iter[T, _] { vec.to_slice().iter() }
fun write[W, T](writer: W, vec: Vec[T]) { writer.write(vec.to_slice()) }

| Stack  
| Something where you can push and pop items. Essentially just a Vec, but
| sometimes this type expresses the intent more clearly.

struct Stack[T] { vec: Vec[T] }
fun stack[T](): Stack[T] { Stack { vec = vec[T]() } }
fun len[T](stack: Stack[T]): U64 { stack.vec.len }
fun is_empty[T](stack: Stack[T]): Bool { stack.vec.is_empty() }
fun push[T](stack: &Stack[T], item: T) { stack.vec.&.push(item) }
fun pop[T](stack: &Stack[T]): T { stack.vec.&.pop() }
fun top[T](stack: Stack[T]): T { stack.top(0) }
fun top[T](stack: Stack[T], n: U64): T {
  stack.vec.get(stack.vec.len.subtract(1).subtract(n))
}
fun top_ref[T](stack: Stack[T]): &T { stack.top_ref(0) }
fun top_ref[T](stack: Stack[T], n: U64): &T {
  stack.vec.get_ref(stack.vec.len.subtract(1).subtract(n))
}
fun equals[T](a: Stack[T], b: Stack[T]): Bool { a.vec.equals(b.vec) }
fun write[W, T](writer: W, stack: Stack[T]) { writer.write(stack.vec) }

| Deque  
| A growable array-like structure where you can push and pop from both ends.
| It maintains an inclusive start and an exclusive end index. Basically, there
| are two possibilities how this can be layed out:
|
| Start before end:           End before start:
| [-][0][1][2][3][4][-][-]    [3][4][-][-][-][0][1][2]
|     s              e               e        s

struct Deque[T] { data: Slice[T], start: U64, end: U64 }
fun deque[T](): Deque[T] {
  Deque { data = uninitialized_slice[T](8), start = 0, end = 0 }
}
fun len[T](deque: Deque[T]): U64 {
  if deque.end.is_at_least(deque.start)
  then deque.end.subtract(deque.start)
  else deque.start.add(deque.data.len).subtract(deque.end)
}
fun is_empty[T](deque: Deque[T]): Bool { deque.len().equals(0) }
fun reserve[T](deque: &Deque[T], size: U64) {
  if deque.data.len.is_at_least(size) then return
  var slices = deque.to_slices()
  var total_len = deque.len()
  deque.data = uninitialized_slice[T](size)
  slices.a.copy_to(deque.data.subslice(0, slices.a.len))
  slices.b.copy_to(deque.data.subslice(slices.a.len, total_len))
  deque.start = 0
  deque.end = total_len
}
fun push_front[T](deque: &Deque[T], item: T) {
  if deque.data.len.equals(deque.len().dec())
  then deque.reserve(deque.data.len.multiply(2))
  deque.start = if deque.start.equals(0)
    then deque.data.len
    else deque.start.dec()
  deque.data.get_ref(deque.start).* = item
}
fun pop_front[T](deque: &Deque[T]): T {
  if deque.is_empty() then panic("pop_front on empty deque")
  var item = deque.data.get(deque.start)
  deque.start = deque.start.inc().modulo(deque.data.len)
  item
}
fun push_back[T](deque: &Deque[T], item: T) {
  if deque.data.len.equals(deque.len().dec())
  then deque.reserve(deque.data.len.multiply(2))
  deque.data.get_ref(deque.end).* = item
  deque.end = deque.end.inc().modulo(deque.data.len)
}
fun pop_back[T](deque: &Deque[T]): T {
  if deque.is_empty() then panic("pop_back on empty deque")
  deque.end = if deque.end.equals(0)
    then deque.data.len
    else deque.end.dec()
  deque.data.get(deque.end)
}
fun get[T](deque: Deque[T], index: U64): T { deque.get_ref(index).* }
fun get_ref[T](deque: Deque[T], index: U64): &T {
  deque.data.get_ref(index.add(deque.start).modulo(deque.data.len))
}
fun to_slices[T](deque: Deque[T]): Tuple[Slice[T], Slice[T]] {
  if deque.end.is_at_least(deque.start)
  then tuple(deque.data.subslice(deque.start, deque.end), empty_slice[T]())
  else tuple(
    deque.data.subslice(deque.start, deque.data.len),
    deque.data.subslice(0, deque.start)
  )
}
fun equals[T](a: Deque[T], b: Deque[T]): Bool {
  a.len().equals(b.len()) orelse return false
  for i in 0.to(a.len()) do a.get(i).equals(b.get(i)) orelse return false
  true
}

| Map   
| Stores key-value-pairs for efficient lookup. The key has to support hash and
| equals.

struct Map[K, V] { buckets: Slice[MapBucket[K, V]], size: U64 }
enum MapBucket[K, V] { empty, filled: MapEntry[K, V] }
struct MapEntry[K, V] { key: K, value: V }

fun map[K, V](): Map[K, V] {
  Map { buckets = filled_slice(8, MapBucket[K, V].empty), size = 0 }
}

fun is_empty[K, V](map: Map[K, V]): Bool { map.size.equals(0) }
fun put[K, V](map: &Map[K, V], key: K, value: V) {
  var fill_percentage = 100.multiply(map.size).divide(map.buckets.len)
  if fill_percentage.is_at_least(60) then {
    var old_buckets = map.buckets
    map.* = Map {
      buckets = filled_slice(
        map.buckets.len.multiply(2),
        MapBucket[K, V].empty
      ),
      size = 0,
    }
    for bucket in old_buckets do
      if bucket is filled(entry) then map.raw_insert(entry.key, entry.value)
  }
  map.raw_insert(key, value)
}
fun raw_insert[K, V](map: &Map[K, V], key: K, value: V) {
  var i = key.hash().modulo(map.buckets.len)
  loop {
    var bucket = map.buckets.get_ref(i)
    switch bucket.*
    case empty {
      bucket.* = MapBucket.filled(MapEntry { key, value })
      map.size = map.size.inc()
      break
    }
    case filled(entry)
      if entry.key.equals(key) then {
        bucket.* = MapBucket.filled(MapEntry { key, value })
        break
      } else i = i.inc().modulo(map.buckets.len)
  }
}
fun contains[K, V](map: Map[K, V], key: K): Bool {
  map.get_maybe(key).is_some()
}
fun get_maybe[K, V](map: Map[K, V], key: K): Maybe[V] {
  var i = key.hash().modulo(map.buckets.len)
  loop {
    var bucket = map.buckets.get(i)
    switch bucket
    case empty return none[V]()
    case filled(entry)
      if entry.key.equals(key)
      then return some(entry.value)
      else i = i.inc().modulo(map.buckets.len)
  }
}
fun get[K, V](map: Map[K, V], key: K): V { map.get_maybe(key).unwrap() }

fun write[W, K, V](writer: W, entry: MapEntry[K, V]) {
  writer."{entry.key}: {entry.value}"
}
fun write[W, K, V](writer: W, map: Map[K, V]) {
  writer."{{comma_separated(map.iter())}}"
}

fun iter[K, V](map: Map[K, V]): Iter[MapEntry[K, V], _] {
  MapIter { buckets = map.buckets, index = 0 }
    .wrap_in_iter[MapEntry[K, V], MapIter[K, V]]()
}
struct MapIter[K, V] { buckets: Slice[MapBucket[K, V]], index: U64 }
fun next[K, V](map: &MapIter[K, V]): Maybe[MapEntry[K, V]] {
  loop {
    if map.index.is_at_least(map.buckets.len)
    then return none[MapEntry[K, V]]()
    map.index = map.index.add(1)
    if map.buckets.get(map.index.subtract(1)) is filled(entry)
    then return some(entry)
  }
}

| Set  

struct Set[T] { map: Map[T, Nothing] }

fun set[T](): Set[T] { Set[T] { map = map[T, Nothing]() } }
fun to_set[T](vec: Vec[T]): Set[T] {
  var set = set[T]()
  for item in vec do set.&.put(item)
  set
}

fun is_empty[T](set: Set[T]): Bool { set.map.size.equals(0) }
fun put[T](set: &Set[T], value: T) { set.map.&.put(value, {}) }
fun contains[T](set: Set[T], value: T): Bool { set.map.contains(value) }

fun write[W, T](writer: W, set: Set[T]) {
  writer.write(#{)
  var first = true
  for item in set do {
    if first then first = false else writer.write(", ")
    writer.write(item)
  }
  writer.write(#})
}

fun iter[T](set: Set[T]): Iter[T, _] {
  SetIter { buckets = set.map.buckets, index = 0 }
    .wrap_in_iter[T, SetIter[T]]()
}
struct SetIter[T] { buckets: Slice[MapBucket[T, Nothing]], index: U64 }
fun next[T](set: &SetIter[T]): Maybe[T] {
  loop {
    if set.index.is_at_least(set.buckets.len) then return none[T]()
    set.index = set.index.add(1)
    if set.buckets.get(set.index.subtract(1)) is filled(entry)
    then return some(entry.key)
  }
}

fun min[T](slice: Set[T]): Maybe[T] {
  var candidate = none[T]()
  for item in slice do
    switch candidate
    case some(c) candidate = some(min(c, item))
    case none candidate = some(item)
  return candidate
}

| TODO: segment tree, treap
