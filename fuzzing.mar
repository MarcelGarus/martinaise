import stdlib

fun main(): Never {
  var rng = prng()
  | Generate some random Vec[Int]s.
  for i in 0..10 do println(generator[Vec[Int]](rng.&).generate())
  exit(0)
}

struct Generator[T] { rng: &Prng }
fun generator[T](rng: &Prng): Generator[T] { Generator[T] { rng } }

| Generator implementations for specific types:

fun generate(generator: Generator[Str]): Str { "test" }
fun generate(generator: Generator[Int]): Int { generator.rng.next_int() % 100 }
fun generate[T](generator: Generator[Vec[T]]): Vec[T] {
  var len = generator.rng.next_int().abs() % 10
  var vec = vec[T]() | todo: allocate enough capacity upfront
  for i in 0..len do vec.&.push(generator[T](generator.rng).generate())
  vec
}
| Todo: Implement fallback keyword. If multiple functions match, the fallback
| function does not apply.
| fallback fun generate[T](generator: Generator[T]): T { ... }
