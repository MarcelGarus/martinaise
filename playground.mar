struct Tree[T] { value: T, children: Vec[Tree[T]] }
fun tree[T](value: T, children: Vec[Tree[T]]): Tree[T] { Tree[T] { value, children } }
fun tree[T](value: T): Tree[T] { Tree[T] { value, children = vec[Tree[T]]() } }
fun write[W, T](writer: W, tree: Tree[T]) {
  writer.write_char(tree.value)
  for child in tree.children do writer.write(child)
}

fun main(): Never {
  var tree = tree('H, vec(
    tree('e, vec(
      tree('l),
      tree('l),
    )),
    tree('o),
  ))
  println(tree)

  exit(0_U8)
}

|fun map[T, X](maybe: Maybe[T], mapper: T -> X): Maybe[X] {
|  return match maybe {
|    case Some t -> Some mapper(t),
|    case None -> None,
|  };
|}
