struct Foo {
  bar: Bar,
}
struct Bar {}

fun main(): U8 {
  var f = if Bool.true {
    3_U8
  } else {
    return 4_U8
  }

  var f = new(Foo.{ bar = Bar.{} })
  println(f.to_address())
  println(f.*.bar.&.to_address())
  return 0_U8
}

|fun fib(n: U64): U64 {
|  if n.is_at_most(1_u64) { n } else { fib(n.subtract(1_u64)).add(fib(n.subtract(2_u64))) }
|}

|fun main() {
|  print(fib(10))
|}
|
|fun map[T, X](maybe: Maybe[T], mapper: T -> X): Maybe[X] {
|  return match maybe {
|    case Some t -> Some mapper(t),
|    case None -> None,
|  };
|}
|
|struct String {
|  len: U8,
|}
