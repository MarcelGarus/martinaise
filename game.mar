import stdlib.mar
import ui.mar

fun left(p: Point, n: Int): Point  { Point { x = p.x - n, y = p.y } }
fun right(p: Point, n: Int): Point { Point { x = p.x + n, y = p.y } }
fun above(p: Point, n: Int): Point { Point { x = p.x, y = p.y - n } }
fun below(p: Point, n: Int): Point { Point { x = p.x, y = p.y + n } }

| Level  

struct Level {
  tiles: Matrix[Tile],
  player: Point,
}
enum Tile { free, wall, box }

fun get(level: Level, point: Point): Tile {
  level.tiles.get_maybe(point) or Tile.wall
}
fun set(level: Level, point: Point, tile: Tile) {
  if level.tiles.get_maybe_ref(point) is some(t) then t.* = tile
}

| Level Generation  

fun generate_level(random: &Random): Level {
  var level = Level {
    tiles = filled_matrix(40, 10, Tile.free),
    player = 1 @ 1,
  }

  for i in 0..10 do
    loop {
      var x = random.next_int(2..{level.tiles.width - 2})
      var y = random.next_int(2..{level.tiles.height - 2})
      println("Placing box at {x} {y}")
      if level.get(x @ y) is free then {
        level.set(x @ y, Tile.box)
        break
      }
    }
  for i in 0..10 do
    loop {
      var x = random.next_int(2..{level.tiles.width - 2})
      var y = random.next_int(2..{level.tiles.height - 2})
      var w = random.next_int(1..5)
      var h = random.next_int(1..4)
      println("Placing wall at {x} {y} ({w} * {h})")
      var is_free = true
      for xx in x..+w do
        for yy in y..+h do
          if level.get(xx @ yy) is free then {} else is_free = false
      if is_free then {
        for xx in x..+w do
          for yy in y..+h do
            level.set(xx @ yy, Tile.wall)
        break
      }
    }

  level
}

| Gameplay  

fun move(level: &Level, direction: Point) {
  var new_pos = level.player + direction
  var pushed = 0
  loop {
    switch level.get(new_pos + {pushed * direction})
      case free break
      case wall return {} | can't move
      case box {
        pushed = pushed + 1
        if pushed == 3 then return {} | too heavy
      }
  }
  for i in 0..=pushed do {
    level.set(new_pos + {pushed - i * direction},
      level.get(level.player + {pushed - i * direction}))
  }
  level.player = new_pos
}
fun move_left(level: &Level)  { level.move({0-1} @ 0  ) }
fun move_right(level: &Level) { level.move(1     @ 0  ) }
fun move_up(level: &Level)    { level.move(0     @ {0-1}) }
fun move_down(level: &Level)  { level.move(0     @ 1  ) }

| Rendering  

var box_color    = color(16#1a94ff)
var ground_color = color(16#f2f2f7)
var wall_color   = color(16#1c1c1e)

fun draw(texture: &Texture, level: Level) {
  var offset = 10 @ 10
  var grid = 17
  texture.&.fill(wall_color)
  for y in 0..level.tiles.height do {
    for x in 0..level.tiles.width do {
      var color =
        switch level.get(x @ y)
          case free ground_color
          case wall wall_color
          case box box_color
      texture.&.draw({{x @ y} * grid + offset}.by(grid @ grid), color)
    }
  }
  texture.&.draw(
    {level.player * grid + offset + {1 @ 1}}.by({grid - 2} @ {grid - 2}),
    color(255, 0, 0))
}

fun write[W](writer: W, level: Level) {
  for y in {0-1}..{level.tiles.height + 1} do {
    for x in {0-5}..{level.tiles.width + 5} do {
      if level.player == {x @ y} then {
        writer."+"
      } else {
        writer."{
          switch level.get(x @ y)
            case free " "
            case wall "â–“"
            case box "X"
        }"
      }
    }
    writer."\n"
  }
}

fun main(): Never {
  var random = random_number_generator(10)
  var level = generate_level(random.&)
  var screen = screen_texture()

  loop {
    eprintln("Drawing level")
    println(level)
    screen.&.draw(level)
    screen.show()

    if get_pressed_key() is some(key) then
      switch key
        case w level.&.move_up()
        case a level.&.move_left()
        case s level.&.move_down()
        case d level.&.move_right()
        case q break
        default eprintln("Pressed key: {key.debug()}")
  }
  println("Thanks for playing!")
  exit(0)
}
