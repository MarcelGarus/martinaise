| Editor  

| SDL2 Bindings  
| SDL2 has to be linked together with this program. Here are some wrappers that
| call the linked SDL functions. All SDL functions follow the system V calling
| convention, which means that the stack needs to be aligned to 16 bytes.

fun raw_sdl_init(flags: U64): U64 asm {
  mov rdi, [rsp + 16] ; flags
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_Init
  add rsp, 8
  pop rsp
  ; return
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}
fun raw_sdl_create_window(title: OsStr): U64 asm {
  mov rdi, [rsp + 16]
  mov rsi, 200 ; x
  mov rdx, 100 ; y
  mov rcx, 960 ; width
  mov r8, 720  ; height
  mov r9, 4
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_CreateWindow
  add rsp, 8
  pop rsp
  ; return
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}
fun raw_sdl_create_renderer(window: U64): U64 asm {
  mov rdi, [rsp + 16]
  mov rsi, -1
  mov rdx, 6
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_CreateRenderer
  add rsp, 8
  pop rsp
  ; return
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}
fun raw_sdl_rw_from_file(bmp_path: OsStr, readbin: OsStr): U64 asm {
  mov rdi, [rsp + 16]
  mov rsi, [rsp + 24]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_RWFromFile
  add rsp, 8
  pop rsp
  ; return
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}
fun raw_sdl_load_bmp(file_contents: U64): U64 asm {
  mov rdi, [rsp + 16]
	mov rsi, 1
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_LoadBMP_RW
  add rsp, 8
  pop rsp
  ; return
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}
fun raw_sdl_create_texture_from_surface(renderer: U64, surface: U64): U64 asm {
	mov rdi, [rsp + 16]
	mov rsi, [rsp + 24]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_CreateTextureFromSurface
  add rsp, 8
  pop rsp
  ; return
	mov r8, [rsp + 8]
  mov [r8], rax
  ret
}
fun raw_sdl_free_surface(surface: U64) asm {
	mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_FreeSurface
  add rsp, 8
  pop rsp
  ; return
  ret
}
fun raw_sdl_render_clear(renderer: U64) asm {
  mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_RenderClear
  add rsp, 8
  pop rsp
  ; return
  ret
}
fun raw_sdl_set_render_draw_color(
  renderer: U64, r: U64, g: U64, b: U64, a: U64
) asm {
  mov rdi, [rsp + 16]
  mov rsi, [rsp + 24]
  mov rdx, [rsp + 32]
  mov rcx, [rsp + 40]
  mov r8, [rsp + 48]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_SetRenderDrawColor
  add rsp, 8
  pop rsp
  ; return
  ret
}
fun raw_sdl_render_copy(renderer: U64, texture: U64) asm {
  mov rdi, [rsp + 16]
	mov rsi, [rsp + 24]
	mov rdx, 0
	mov rcx, 0
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_RenderCopy
  add rsp, 8
  pop rsp
  ; return
  ret
}
fun raw_sdl_render_present(renderer: U64) asm {
  mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_RenderPresent
  add rsp, 8
  pop rsp
  ; return
  ret
}
fun raw_sdl_delay(millis: U64) asm {
  mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_Delay
  add rsp, 8
  pop rsp
	; return
  ret
}
fun raw_sdl_destroy_texture(texture: U64) asm {
  mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_DestroyTexture
  add rsp, 8
  pop rsp
	; return
  ret
}
fun raw_sdl_destroy_renderer(renderer: U64) asm {
  mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_DestroyRenderer
  add rsp, 8
  pop rsp
	; return
  ret
}
fun raw_sdl_destroy_window(window: U64) asm {
  mov rdi, [rsp + 16]
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_DestroyWindow
  add rsp, 8
  pop rsp
	; return
  ret
}
fun raw_sdl_quit() asm {
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_Quit
  add rsp, 8
  pop rsp
	; return
  ret
}
fun raw_sdl_get_error(): U64 asm {
  ; make the call with a 16-bytes-aligned stack
  mov rbp, rsp
  and rsp, 0xfffffffffffffff0
  push rbp
  sub rsp, 8
  call SDL_GetError
  add rsp, 8
  pop rsp
	; return
  mov r8, [rsp + 8]
  mov [r8], rax
  ret
}

| Colors  

struct Color { r: U8, g: U8, b: U8 }

fun color(hex: U64): Color {
  Color {
    r = {hex / 16#10000}.and(16#ff).to_U8(),
    g = {hex / 16#100}.and(16#ff).to_U8(),
    b = {hex / 16#1}.and(16#ff).to_U8(),
  }
}
fun write[W](writer: W, color: Color) {
  writer."#{color.r.radix(16)}{color.g.radix(16)}{color.b.radix(16)}"
}

var black = color(16#000000)
var white = color(16#ffffff)
var red   = color(16#ff0000)

| SDL wrappers  
| These are some type-safe wrappers around the SDL functions.

struct Window { handle: U64 }
struct Renderer { handle: U64 }

fun init_sdl(): Result[Nothing, U64] {
  var result = raw_sdl_init(62001)
  if result == 0
  then ok[Nothing, U64]({})
  else error[Nothing, U64](result)
}
fun create_window(title: Str): Window {
  var handle = raw_sdl_create_window(title.to_os_str())
  Window { handle }
}
fun create_renderer(window: Window): Renderer {
  var handle = window.handle.raw_sdl_create_renderer()
  Renderer { handle }
}
fun set_color(renderer: Renderer, color: Color) {
  renderer.handle.raw_sdl_set_render_draw_color(
    color.r.to_U64(), color.g.to_U64(), color.b.to_U64(), 16#ff
  )
}
fun delay(millis: U64) { raw_sdl_delay(millis) }
fun clear(renderer: Renderer) { renderer.handle.raw_sdl_render_clear() }
fun present(renderer: Renderer) { renderer.handle.raw_sdl_render_present() }
fun destroy(renderer: Renderer) { renderer.handle.raw_sdl_destroy_renderer() }
fun destroy(window: Window) { window.handle.raw_sdl_destroy_window() }
fun quit_sdl() { raw_sdl_quit() }


fun main(args: Slice[Str]): Never {
  init_sdl().unwrap()
  var window = create_window("Martinaise Editor")
  var renderer = window.create_renderer()
  println(16#ff)
  println(red)
  println(white)
  renderer.set_color(red)
  renderer.clear()
  renderer.present()

  println("looping")
  for i in 0..2 do {
    println("delaying")
    delay(1000)
  }

  println("destroying stuff")
  renderer.destroy()
  window.destroy()

  quit_sdl()

  exit(0:U8)
}
