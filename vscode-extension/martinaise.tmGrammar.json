{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "mar",
  "scopeName": "source.mar",
  "fileTypes": ["mar"],
  "patterns": [
    { "include": "#all" }
  ],
  "repository": {
    "all": {
      "patterns": [
        {
          "name": "keyword",
          "match": "\\b(fun|var|struct|enum|opaque|byte big|bytes big|byte aligned|bytes aligned)\\b"
        },
        {
          "name": "keyword.control",
          "match": "\\b(if|then|else|switch|default|orelse|loop|for|in|do|break|continue|return)\\b"
        },
        {
          "name": "keyword.control",
          "match": "case\\s+([a-zA-Z_0-9]*)",
          "captures": {
            "1": {
              "name": "emphasis"
            }
          }
        },
        {
          "name": "keyword.control",
          "match": "is\\s+([a-zA-Z_0-9]*)",
          "captures": {
            "1": {
              "name": "emphasis"
            }
          }
        },
        {
          "begin": "(asm) {",
          "end": "}",
          "captures": {
            "1": { "name": "keyword" }
          },
          "patterns": [{ "include": "#asm" }]
        },
        {
          "name": "comment.line",
          "match": "\\| (.*)  $",
          "captures": {
            "1": {
              "name": "markup.bold"
            }
          }
        },
        {
          "name": "comment.line",
          "begin": "\\|",
          "end": "$",
          "patterns": [
            {
              "match": "\\bTODO\\b:?",
              "name": "keyword.todo"
            }
          ]
        },
        {
          "name": "string.quoted.meta.2",
          "begin": "''\"",
          "end": "\"''",
          "patterns": [
            {
              "begin": "{{{",
              "end": "}}}",
              "patterns": [{ "include": "#all" }]
            }
          ]
        },
        {
          "name": "string.quoted.meta.1",
          "begin": "'\"",
          "end": "\"'",
          "patterns": [
            {
              "begin": "{{",
              "end": "}}",
              "patterns": [{ "include": "#all" }]
            }
          ]
        },
        {
          "name": "string.quoted.meta.0",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "begin": "{",
              "end": "}",
              "patterns": [{ "include": "#all" }]
            }
          ]
        },
        {
          "name": "constant.numeric",
          "match": "[0-9_]#[0-9a-fA-F]*\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b[0-9][0-9_]*\\b"
        },
        {
          "name": "string.char",
          "match": "#."
        },
        {
          "name": "entity.name.function",
          "match": "([a-z][a-zA-Z_0-9]*)(?=\\s*(\\(|\\[))"
        },
        {
          "name": "entity.name.type",
          "match": "\\b[A-Z][a-zA-Z_0-9]*\\b"
        },
        {
          "name": "variable",
          "match": "\\b[a-z][a-zA-Z_0-9]*\\b"
        }
      ]
    },
    "asm": {
      "patterns": [
        {
          "name": "comment.line",
          "match": "\\; (.*)  $",
          "captures": {
            "1": {
              "name": "markup.bold"
            }
          }
        },
        {
          "name": "comment.line",
          "begin": "\\;",
          "end": "$",
          "patterns": [
            {
              "match": "\\bTODO\\b:?",
              "name": "keyword.todo"
            }
          ]
        },
        {
					"name": "support.type.flag.asm",
					"match": "\\b(?i:(j[pr]|call|ret))(?:\\s+(?i:([cmpz]|n[cz]|p[eo])))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.mnemonic.z80.asm"
						},
						"2": {
							"name": "keyword.control.operator.z80.flag.asm"
						}
					}
				},
				{
					"name": "keyword.control.mnemonic.z80.asm",
					"match": "\\s(?i:adc|add|and|bit|ccf|cp|cpdr?|cpir?|cpl|daa|dec|[de]i|djnz|exx?|halt|im|in|inc|indr?|inir?|ld|lddr?|ldir?|neg|nop|or|ot[di]r|out|out[di]|pop|push|res|ret[in]|rl|rla|rlc|rlca|rld|rr|rra|rrc|rrca|rrd|rst|sbc|scf|set|sli?a|sll|swap|sra|srl|sub|xor)\\s"
				},
				{
					"name": "keyword.control.mnemonic.z80n.asm",
					"match": "\\s(?i:bsla|bsr[alf]|brlc|setae|pixelad|pixeldn|nextreg|mirror|ldws|ldix|ld[di]rx|outinb|mul|swapnib|test)\\s"
				},
				{
					"name": "support.type.register.z80.asm",
					"match": "\\b(?i:[abcdefhlir]|ix|iy|af'?|bc|de|hl|pc|sp|ix[luh]|iy[luh]|[lh]x|x[lh]|[lh]y|y[lh])\\b"
				},

				{
					"name": "constant.numeric.operator.asm",
					"match": "\\b(?i:high|low|not|mod|sh[lr])\\b"
				},

				{
					"name": "constant.language.operator.asm",
					"match": "(?i:\\{(?:hex[248]?|bin(?:8|16|32)?|int|eval)?\\})"
				},

				{
					"name": "keyword.control.mnemonic.x86.asm",
					"match": "\\s(?i:aaa|aad|aam|aas|adc|add|addpd|addps|addsd|addss|addsubpd|addsubps|aesdec|aesdeclast|aesenc|aesenclast|aesimc|aeskeygenassist|altinst|and|andnpd|andpd|arpl|blendpd|blendps|blendvpd|blendvps|bound|bsf|bsr|bswap|bt|btc|btr|bts|cbw|cdq|cdqe|clc|cld|clflush|clgi|cli|clts|cmc|cmova|cmovae|cmovb|cmovbe|cmovc|cmove|cmovg|cmovge|cmovl|cmovle|cmovna|cmovnae|cmovnb|cmovnbe|cmovnc|cmovne|cmovng|cmovnge|cmovnl|cmovnle|cmovno|cmovnp|cmovns|cmovnz|cmovo|cmovp|cmovpe|cmovpo|cmovs|cmovz|cmp|cmppd|cmpps|cmpsb|cmpsd|cmpsq|cmpss|cmpsw|cmpxchg|cmpxchg16b|cmpxchg8b|comisd|comiss|cpuid|cqo|crc32|cvtdq2pd|cvtdq2ps|cvtpd2dq|cvtpd2pi|cvtpd2ps|cvtpi2pd|cvtpi2ps|cvtps2dq|cvtps2pd|cvtps2pi|cvtsd2si|cvtsd2ss|cvtsi2sd|cvtsi2ss|cvtss2sd|cvtss2si|cvttpd2dq|cvttpd2pi|cvttps2dq|cvttps2pi|cvttsd2si|cvttss2si|cwd|cwde|daa|das|dec|div|divpd|divps|divsd|divss|dppd|dpps|emms|enter|esc|extractps|f2xm1|fabs|fadd|faddp|fbld|fbstp|fchs|fclex|fcom|fcomp|fcompp|fcos|fdecstp|fdisi|fdiv|fdivp|fdivr|fdivrp|feni|ffree|fiadd|ficom|ficomp|fidiv|fidivr|fild|fimul|fincstp|finit|fist|fistp|fisub|fisubr|fld|fld1|fldcw|fldenv|fldenvd|fldenvw|fldl2e|fldl2t|fldlg2|fldln2|fldpi|fldz|fmul|fmulp|fnclex|fndisi|fneni|fninit|fnop|fnsave|fnsavew|fnstcw|fnstenv|fnstenvw|fnstsw|fpatan|fprem|fprem1|fptan|frndint|frstor|frstord|frstorw|fsave|fsaved|fsavew|fscale|fsetpm|fsin|fsincos|fsqrt|fst|fstcw|fstenv|fstenvd|fstenvw|fstp|fstsw|fsub|fsubp|fsubr|fsubrp|ftst|fucom|fucomp|fucompp|fwait|fxam|fxch|fxtract|fyl2x|fyl2xp1|haddpd|haddps|hlt|hsubpd|hsubps|ibts|icebp|idiv|imul|in|inc|ins|insd|insertps|int|into|invd|invlpg|invlpga|iret|iretd|iretf|iretq|ja|jae|jb|jbe|jc|jcxz|je|jecxz|jg|jge|jl|jle|jmp|jna|jnae|jnb|jnbe|jnc|jne|jng|jnge|jnl|jnle|jno|jnp|jns|jnz|jo|jpe|jpo|jrcxz|js|jz|lahf|lar|ld|lddqu|ldmxcsr|lds|lea|leave|les|lfence|lfs|lgdt|lgs|lidt|lldt|lmsw|loadall|loadalld|lock|lodsb|lodsd|lodsq|lodsw|lsl|lss|ltr|maskmovdqu|maskmovq|maxpd|maxps|maxsd|maxss|mfence|minpd|minps|minsd|minss|monitor|mov|movapd|movaps|movd|movddup|movdq2q|movdqa|movdqu|movhlps|movhpd|movhps|movlhps|movlpd|movlps|movmskpd|movmskps|movntdq|movntdqa|movnti|movntpd|movntps|movntq|movq|movq2dq|movsb|movsd|movshdup|movsldup|movss|movsw|movsx|movsxd|movupd|movups|movzx|mpsadbw|mul|mulpd|mulps|mulsd|mulss|mwait|neg|nop|not|or|orpd|out|outs|outsd|pabsb|pabsd|pabsw|packssdw|packsswb|packusdw|packuswb|paddb|paddd|paddq|paddsb|paddsw|paddusb|paddusw|paddw|palignr|pand|pandn|pause|pavgb|pavgw|pblendvb|pblendw|pcmpeqb|pcmpeqd|pcmpeqq|pcmpeqw|pcmpestri|pcmpestrm|pcmpgtb|pcmpgtd|pcmpgtq|pcmpgtw|pcmpistri|pcmpistrm|pextrb|pextrd|pextrq|pextrw|phaddd|phaddsw|phaddw|phminposuw|phsubd|phsubsw|phsubw|pinsrb|pinsrd|pinsrq|pinsrw|pmaddubsw|pmaddwd|pmaxsb|pmaxsd|pmaxsw|pmaxub|pmaxud|pmaxuw|pminsb|pminsd|pminsw|pminub|pminud|pminuw|pmovmskb|pmovsxbd|pmovsxbq|pmovsxbw|pmovsxdq|pmovsxwd|pmovsxwq|pmovzxbd|pmovzxbq|pmovzxbw|pmovzxdq|pmovzxwd|pmovzxwq|pmuldq|pmulhrsw|pmulhuw|pmulhw|pmulld|pmullw|pmuludq|pop|popa|popad|popf|popfd|popfq|por|prefetchnta|prefetcht0|prefetcht1|prefetcht2|psadbw|pshufb|pshufd|pshufhw|pshuflw|pshufw|psignb|psignd|psignw|pslld|pslldq|psllq|psllw|psrad|psraw|psrld|psrldq|psrlq|psrlw|psubb|psubd|psubq|psubsb|psubsw|psubusb|psubusw|psubw|ptest|punpckhbw|punpckhdq|punpckhqdq|punpckhwd|punpcklbw|punpckldq|punpcklqdq|punpcklwd|push|pusha|pushad|pushf|pushfd|pushfq|pxor|rcl|rcpps|rcpss|rcr|rdmsr|rdpmc|rdtsc|rdtscp|ret|retf|retn|rol|ror|roundpd|roundps|roundsd|roundss|rsm|rsqrtps|rsqrtss|sahf|sal|salc|sar|sbb|scasb|scasd|scasq|scasw|set|seta|setae|setb|setbe|setc|sete|setg|setge|setl|setle|setna|setnae|setnb|setnbe|setnc|setne|setng|setnge|setnl|setnle|setno|setnp|setns|setnz|seto|setp|setpe|setpo|sets|sfence|sgdt|sha1msg1|sha1msg2|sha1nexte|sha1rnds4|sha256msg1|sha256msg2|sha256rnds2|shl|shld|shr|shrd|shufpd|shufps|sidt|skinit|sldt|smsw|sqrtpd|sqrtps|sqrtsd|sqrtss|stc|std|stgi|sti|stmxcsr|stosb|stosd|stosq|stosw|str|sub|subpd|subps|subsd|subss|swapgs|syscall|sysenter|sysexit|sysret|test|ucomisd|ucomiss|ud1|ud2|unpckhpd|unpckhps|unpcklpd|unpcklps|verr|verw|vfmaddpd|vfmaddps|vfmaddsd|vfmaddss|vfmaddsubpd|vfmaddsubps|vfmsubaddpd|vfmsubaddps|vfmsubpd|vfmsubps|vfmsubsd|vfmsubss|vfnmaddpd|vfnmaddps|vfnmaddsd|vfnmaddss|vfnmsubpd|vfnmsubps|vfnmsubsd|vfnmsubss|vmcall|vmclear|vmlaunch|vmload|vmmcall|vmptrld|vmptrst|vmread|vmresume|vmrun|vmsave|vmwrite|vmxoff|vmxon|wait|wbinvd|wrmsr|xadd|xbts|xchg|xlat|xor|xorpd)\\s"
				},
				{
					"name": "keyword.control.mnemonic.asm",
					"match": "\\s(?i:rep|repe|repne|repnz|repz)\\s(?i:ins|movs|outs|stos|cmps|scas|lods)[bwdq]?\\s"
				},

				{
					"name": "support.type.register.asm",
					"match": "\\b(?:[re]?[a-d]x|[a-d][hl]|[re]?(?:si|di|bp|sp)|(?:si|di|bp|sp)l|r(?:[89]|1[0-5])[dwb]?)\\b"
				},
				{
					"name": "support.type.register.asm",
					"match": "\\b(?:[csdefg]s|st[0-7]|mm[0-7]|xmm(?:[0-9]|1[0-5])|cr[02348]|dr[0-7])\\b"
				},
        {
          "name": "entity.name.function",
          "match": "\\b[a-z][a-z_0-9]*\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b[0-9]+\\b"
        }
      ]
    }
  }
}
