| returns the game id if it's possible, 0 otherwise
fun game_score(game: Slice[U8]): U64 {
  var prefix_and_turns = game.split(": ")
  var prefix = prefix_and_turns.get(0_U64)
  var turns = prefix_and_turns.get(1_U64)

  prefix.&.trim_prefix("Game ")
  var id = prefix.parse_U64()

  var red = 0_U64
  var green = 0_U64
  var blue = 0_U64
  for turn in &turns.split("; ").iter() do
    for cubes in &turn.split(", ").iter() do {
      var parts = cubes.split(" ")
      var num = parts.get(0_U64).parse_U64()
      var color = parts.get(1_U64)

      if color.equals("red") then red = max(red, num)
      if color.equals("green") then green = max(green, num)
      if color.equals("blue") then blue = max(blue, num)
    }

  red.multiply(green).multiply(blue) | Game is possible
}

fun main(): U8 {
  var sum = 0_U64
  for line in &read_file("advent/day2.big").lines().iter() do
    sum = sum.add(line.game_score())
  println(sum)
  0_U8
}
