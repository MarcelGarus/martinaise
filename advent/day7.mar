import ../stdlib.mar

struct Hand { score: Int, hand: String, bid: Int }

fun <=>(a: Hand, b: Hand): Ordering {
  switch a.score <=> b.score
  case less return Ordering.less
  case greater return Ordering.greater
  case equal for i in 0..5 do {
    var values = "23456789TJQKA"
    var a_index = values.iter().&.find(a.hand.get(i)).unwrap()
    var b_index = values.iter().&.find(b.hand.get(i)).unwrap()
    var ord = a_index <=> b_index
    switch ord case equal {} default return ord
  }
  Ordering.equal
}
fun hand_score(hand: String): Int {
  var card_to_amount = map[Char, Int]()
  for card in hand do
    if card_to_amount.contains(card)
    then card_to_amount.&.put(card, card_to_amount.get(card) + 1)
    else card_to_amount.&.put(card, 1)

  var amounts = list[Int]()
  for card_and_amount in card_to_amount do
    amounts.&.push(card_and_amount.value)
  amounts.to_slice().&.sort()

  if amounts == list(5) then return 6 | five of a kind
  if amounts == list(1, 4) then return 5 | four of a kind
  if amounts == list(2, 3) then return 4 | full house
  if amounts == list(1, 1, 3) then return 3 | three of a kind
  if amounts == list(1, 2, 2) then return 2 | two pair
  if amounts == list(1, 1, 1, 2) then return 1 | one pair
  0
}

fun main(): Never {
  var hands = list[Hand]()
  for line in read_file("advent/day7.big").unwrap().to_string().lines() do {
    var parts = line.split(" ")
    var hand = parts.get(0)
    var bid = parts.get(1).parse_int()
    hands.&.push(Hand { score = hand_score(hand), hand, bid })
  }
  hands.to_slice().&.sort()

  var total = 0
  for i in 0..hands.len do {
    var hand = hands.get(i)
    println(hand.bid)
    total = total + {{i + 1} * hand.bid}
  }
  println(total)

  exit(0)
}
