struct Hand {
  score: U8,
  hand: Slice[U8],
  bid: U64,
}
fun compare_to(a: Hand, b: Hand): Ordering {
  switch a.score.compare_to(b.score)
  case less return Ordering.less
  case greater return Ordering.greater
  case equal for i in 0.to(5) do {
    var values = "23456789TJQKA"
    var a_index = values.find(a.hand.get(i)).unwrap()
    var b_index = values.find(b.hand.get(i)).unwrap()
    var ord = a_index.compare_to(b_index)
    if not(ord.is_equal()) then return ord
  }
  Ordering.equal
}
fun hand_score(hand: Slice[U8]): U8 {
  var card_to_amount = map[U8, U8]()
  for card in hand do
    if card_to_amount.contains(card)
    then card_to_amount.&.insert(card, card_to_amount.get(card).unwrap().inc())
    else card_to_amount.&.insert(card, 1_U8)

  var amounts = vec[U8]()
  for card_and_amount in card_to_amount do
    amounts.&.push(card_and_amount.value)
  amounts.to_slice().&.sort()

  if amounts.equals(vec[U8](5_U8)) then return 6_U8 | five of a kind
  if amounts.equals(vec[U8](1_U8, 4_U8)) then return 5_U8 | four of a kind
  if amounts.equals(vec[U8](2_U8, 3_U8)) then return 4_U8 | full house
  if amounts.equals(vec[U8](1_U8, 1_U8, 3_U8)) then return 3_U8 | three of a kind
  if amounts.equals(vec[U8](1_U8, 2_U8, 2_U8)) then return 2_U8 | two pair
  if amounts.equals(vec[U8](1_U8, 1_U8, 1_U8, 2_U8)) then return 1_U8 | one pair
  0_U8
}

fun main(): Never {
  var hands = vec[Hand]()
  for line in read_file("advent/day7.big").lines() do {
    var parts = line.split(" ")
    var hand = parts.get(0)
    var bid = parts.get(1).parse_U64()
    hands.&.push(Hand { score = hand_score(hand), hand, bid })
  }
  hands.to_slice().&.sort()

  var total = 0
  for i in 0.to(hands.len) do {
    var hand = hands.get(i)
    println(hand.bid)
    total = total.add(i.inc().multiply(hand.bid))
  }
  println(total)

  exit(0_U8)
}
