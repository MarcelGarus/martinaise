import ../stdlib.mar

fun windows(s: Slice[Char]): Windows { Windows { slice = s, index = 0 } }
struct Windows { slice: Slice[Char], index: Int }
fun next(iter: &Windows): Maybe[Slice[Char]] {
  var item =
    if iter.index < iter.slice.len
    then some(iter.slice.subslice(iter.index))
    else none[Slice[Char]]()
  iter.index = iter.index.add(1)
  item
}

fun rev_windows(s: Slice[Char]): RevWindows {
  RevWindows { slice = s, index = s.len }
}
struct RevWindows { slice: Slice[Char], index: Int }
fun next(iter: &RevWindows): Maybe[Slice[Char]] {
  iter.index = iter.index - 1
  if iter.index < iter.slice.len
  then some(iter.slice.subslice(iter.index))
  else none[Slice[Char]]()
}

fun find_first_digit[I](iter: I, digit_names: Vec[Slice[Char]]): Int {
  loop {
    var part = iter.next() orelse empty_slice[U8]()
    if {#0..=#9}.contains(part.get(0)) then break(part.get(0) - #0)
    var j = 0
    for name in digit_names do {
      if part.starts_with(name) then break
      j = j + 1
    }
    if j < digit_names.len then break(j + 1)
  }
}

fun main(): Never {
  var digit_names = vec[Str]()
  digit_names.&.push("one")
  digit_names.&.push("two")
  digit_names.&.push("three")
  digit_names.&.push("four")
  digit_names.&.push("five")
  digit_names.&.push("six")
  digit_names.&.push("seven")
  digit_names.&.push("eight")
  digit_names.&.push("nine")

  var sum = 0
  for line in read_file("advent/day1-2.smol").unwrap().to_str().lines() do {
    var first_digit = line.chars().windows().&.find_first_digit(digit_names)
    var last_digit = line.chars().rev_windows().&.find_first_digit(digit_names)
    sum = sum.add(first_digit.to_U64().multiply(10).add(last_digit.to_U64()))
  }
  println(sum)
  exit(0)
}
