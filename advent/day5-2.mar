fun main(): Never {
  var lines = &read_file("advent/day5.big").lines().iter()

  var current = set[Range[U64]]()
  {
    var first_line = lines.next().unwrap()
    first_line.&.trim_prefix("seeds: ")
    var iter = &first_line.split(" ").iter()
    loop {
      | TODO: use chunked with for loop
      var start = {iter.next() orelse break}.parse_U64()
      | TODO: add syntax sugar for unwrap
      var len = iter.next().unwrap().parse_U64()
      current.&.insert(start.to(start.add(len)))
    }
    var _ = lines.next().unwrap()
  }

  loop {
    var category = {lines.next() orelse break}
      .split(" ").get(0).split("-to-").get(1)
    var next = set[Range[U64]]()
    var mapped = set[Range[U64]]()
    var extra = set[Range[U64]]()
    loop {
      var line = lines.next() orelse break
      if line.is_empty() then break
      | TODO: refactor with tuples
      var dest = line.split(" ").get(0).parse_U64()
      var source = line.split(" ").get(1).parse_U64()
      var len = line.split(" ").get(2).parse_U64()
      var map_range = source.range_by(len)

      | TODO: refactor with queues
      for range in current do {
        if range.contains(map_range.start).or(range.contains(map_range.end))
        then { | split range into two
          
        }
        if source.to(source.add(len)).contains(id) then {
          mapped.&.insert(id)
          next.&.insert(id.add(dest).subtract(source))
        }
      }
    }
    for id in current do
      if not(mapped.&.contains(id)) then next.&.insert(id)
    current = next
    if category.equals("location") then break
  }
  println(current)
  println(current.min())

  exit(0:U8)
}
