| TODO: Doesn't work yet
fun main(): U8 {
  var lines = read_file("advent/day8.big").lines()
  var directions = lines.get_ref(0_U64)

  var name_to_index = map[Slice[U8], U64]()
  var names = vec[Slice[U8]]()
  var lefts = vec[U16]()
  var rights = vec[U16]()
  var is_initial = vec[Bool]()
  var is_final = vec[Bool]()

  for line in &lines.subslice(2_U64).iter() do {
    var name = line.subslice(0_U64, 3_U64)
    name_to_index.&.insert(name, names.len)
    names.&.push(name)
    is_initial.&.push(name.ends_with("A"))
    is_final.&.push(name.ends_with("Z"))
  }
  for line in &lines.subslice(2_U64).iter() do {
    var left = line.subslice(7_U64, 10_U64)
    var right = line.subslice(12_U64, 15_U64)
    lefts.&.push(name_to_index.get(left).unwrap().to_U16())
    rights.&.push(name_to_index.get(right).unwrap().to_U16())
  }

  var step = 0_U64
  var current = vec[U64]()
  for node in &0_U64.to(names.len).iter() do
    if is_initial.get(node) then current.&.push(node)

  for node in &current.iter() do {
    prints(names.get(node))
    prints(" ")
  }
  println()

  loop {
    var all_end_with_z = Bool.true
    for node in &current.iter() do
      if not(is_final.get(node)) then all_end_with_z = Bool.false
    if all_end_with_z then break

    var direction = directions.get(step.modulo(directions.len))
    if direction.equals('L) then
      for i in &0_U64.to(current.len).iter() do
        current.get_ref(i).* = lefts.get(current.get(i)).to_U64()
    if direction.equals('R) then
      for i in &0_U64.to(current.len).iter() do
        current.get_ref(i).* = rights.get(current.get(i)).to_U64()

    step = step.inc()
    if step.modulo(1000000_U64).equals(0_U64) then {
      print(step)
      prints(": ")
      for node in &current.iter() do {
        prints(names.get(node))
        prints(" ")
      }
      println()
    }
  }
  println(step)

  return 0_U8
}
