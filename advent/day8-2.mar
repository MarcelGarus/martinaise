| TODO: Doesn't work yet
fun main(): Never {
  var lines = read_file("advent/day8.big").lines()
  var directions = lines.get_ref(0)

  var name_to_index = map[Str, Int]()
  var names = list[String]()
  var lefts = list[Int]()
  var rights = list[Int]()
  var is_initial = list[Bool]()
  var is_final = list[Bool]()

  for line in lines.subslice(2) do {
    var name = line.subslice(0, 3)
    name_to_index.&.insert(name, names.len)
    names.&.push(name)
    is_initial.&.push(name.ends_with("A"))
    is_final.&.push(name.ends_with("Z"))
  }
  for line in lines.subslice(2) do {
    var left = line.subslice(7, 10)
    var right = line.subslice(12, 15)
    lefts.&.push(name_to_index.get(left).unwrap().to_int())
    rights.&.push(name_to_index.get(right).unwrap().to_int())
  }

  var step = 0
  var initials = list[Int]()
  for node in 0.to(names.len) do
    if is_initial.get(node) then initials.&.push(node)

  for initial in initials do {
    prints(names.get(initial))
    println()

    var current = initial
    var finals = list[Int]()
    loop {
      if is_final.get(current) then {
        finals.&.push(current)
        println(finals)
      }

      var direction = directions.get(step.modulo(directions.len))
      if direction.equals(#L) then current = lefts.get(current).to_int()
      if direction.equals(#R) then current = rights.get(current).to_int()

      step = step.inc()

      if current.equals(initial).and(step.modulo(directions.len).equals(0))
      then break
    }
    println(finals)
  }
  println()

  exit(0)
}
