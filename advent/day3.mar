fun width(grid: Slice[Slice[U8]]): U64 { grid.get(0_U64).len }
fun height(grid: Slice[Slice[U8]]): U64 { grid.len }
fun get(grid: Slice[Slice[U8]], x: I64, y: I64): U8 {
  if x.is_less_than(0_I64).or(x.is_at_least(grid.width().to_I64()))
    .or(y.is_less_than(0_I64)).or(y.is_at_least(grid.height().to_I64()))
  then return '.
  grid.get(y.to_U64()).get(x.to_U64())
}
fun is_digit(char: U8): Bool { '0.until('9).contains(char) }
fun is_symbol(char: U8): Bool { not(char.is_digit()).and(not(char.equals('.))) }

fun main(): U8 {
  var grid = read_file("advent/day3.big").lines()
  printsln("hi")
  println(grid.width())
  println(grid.height())

  var sum = 0_U64
  for y in &0_I64.to(grid.height().to_I64()).iter() {
    for x in &0_I64.to(grid.width().to_I64()).iter() {
      var char = grid.get(x, y)
      if char.is_digit().and(not(grid.get(x.subtract(1_I64), y).is_digit())) then {
        var end = x
        loop {
          if grid.get(end, y).is_digit() then end = end.add(1_I64) else break
        }
        var num = grid.get(y.to_U64()).subslice(x.to_U64(), end.to_U64()).parse_U64()

        var next_to_symbol = Bool.false
        for xx in &x.subtract(1_I64).until(end).iter() {
          if grid.get(xx, y.subtract(1_I64)).is_symbol() then next_to_symbol = Bool.true
          if grid.get(xx, y.add(1_I64)).is_symbol() then next_to_symbol = Bool.true
        }
        if grid.get(x.subtract(1_I64), y).is_symbol() then next_to_symbol = Bool.true
        if grid.get(end, y).is_symbol() then next_to_symbol = Bool.true

        if next_to_symbol then {
          print(num)
          printsln(" is a part")
          sum = sum.add(num)
        } else {
          print(num)
          printsln(" is NOT a part")
        }
      }
    }
  }

  println(sum)

  return 0_U8
}
