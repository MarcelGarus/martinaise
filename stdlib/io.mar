import stdlib.mar

| Files, Input & Output  

opaque File = 8 bytes big, 8 bytes aligned

fun create_file(filename: String, mode: Int): Result[File, Nothing] asm {
  moveib a 8  add a sp load a a | filename.data
  moveib b 16 add b sp load b b | filename.len
  moveib c 24 add c sp load c c | mode
  syscall 3
  load b sp | return value address
  move st a isequal cjump .ret_error
  .ret_ok: store b a moveib c 8 add b c moveib c 0 storeb b c ret
  .ret_error:        moveib c 8 add b c moveib c 1 storeb b c ret
}
fun open_file_for_reading(filename: String): Result[File, Nothing] asm {
  moveib a 8  add a sp load a a | filename.data
  moveib b 16 add b sp load b b | filename.len
  syscall 4
  load b sp | return value address
  move st a isequal cjump .ret_error
  .ret_ok: store b a moveib c 8 add b c moveib c 0 storeb b c ret
  .ret_error:        moveib c 8 add b c moveib c 1 storeb b c ret
}
fun open_file_for_writing(filename: String): Result[File, Nothing] asm {
  moveib a 8  add a sp load a a | filename.data
  moveib b 16 add b sp load b b | filename.len
  syscall 5
  load b sp | return value address
  move st a isequal cjump .ret_error
  .ret_ok: store b a moveib c 8 add b c moveib c 0 storeb b c ret
  .ret_error:        moveib c 8 add b c moveib c 1 storeb b c ret
}

fun read(file: File, buffer: Slice[Byte]): Result[Int, Nothing] asm {
  moveib a 8  add a sp load a a | file
  moveib b 16 add b sp load b b | buffer.data
  moveib c 24 add c sp load c c | buffer.len
  syscall 6
  load b sp | return value address
  move st a isless cjump .ret_error
  .ret_ok: store b a moveib c 8 add b c moveib c 0 storeb b c ret
  .ret_error:        moveib c 8 add b c moveib c 1 storeb b c ret
}
fun read_byte(file: File): Result[Maybe[Byte], Nothing] {
  var char = 0.lower_byte()
  ok[Maybe[Byte], Nothing](
    if file.read(Slice[Byte] { data = char.&.to_address(), len = 1 })? == 0
    then none[Byte]()
    else some(char)
  )
}
fun read_line(file: File): Result[Maybe[String], Nothing] {
  var content = list[Byte]()
  loop {
    var byte = file.read_byte()? or {
      if content.is_empty() then return ok[Maybe[String], Nothing](none[String]())
      break
    }
    if byte == newline.byte then break
    content.&.push(byte)
  }
  ok[Maybe[String], Nothing](some(content.to_slice().to_string()))
}

fun write_bytes_safely(
  file: File, buffer: Slice[Byte],
): Result[Nothing, Nothing] asm {
  moveib a 8  add a sp load a a | file
  moveib b 16 add b sp load b b | buffer.data
  moveib c 24 add c sp load c c | buffer.len
  syscall 7
  load b sp | return value address
  cmp a c isequal cjump .ret_ok
  .ret_error: moveib c 1 storeb b c ret
  .ret_ok:    moveib c 0 storeb b c ret
}
fun write_byte_safely(file: File, byte: Byte): Result[Nothing, Nothing] {
  file.write_bytes_safely(Slice { data = byte.&, len = 1 })
}
fun write_bytes(file: File, buffer: Slice[Byte]) {
  file.write_bytes_safely(buffer) or panic("couldn't write byte")
}
fun write_byte(file: File, byte: Byte) {
  file.write_byte_safely(byte) or panic("couldn't write byte")
}

fun close(file: File) asm {
  moveib a 8 add a sp load a a | file
  syscall 8 ret
}

fun read_file(name: String): Result[Slice[Byte], Nothing] {
  var file = open_file_for_reading(name)?
  var all_free_memory = Slice[Byte] {
    data = heap_head, len = get_stack_pointer().to_int() - heap_head.to_int()
  }
  var len = file.read(all_free_memory)?
  if len == all_free_memory.len then panic("out of memory")
  file.close()
  var content = all_free_memory.subslice(0..len)
  heap_head = heap_head + len
  ok[Slice[Byte], Nothing](content)
}
fun write_file(name: String, content: Slice[Byte]): Result[Nothing, Nothing] {
  var file = open_file_for_writing(name) or {
    println("Couldn't open file")
    return error[Nothing, Nothing]({})
  }
  file.write_bytes_safely(content) or {
    println("Writing {content.len} bytes failed")
    return error[Nothing, Nothing]({})
  }
  file.close()
  ok[Nothing, Nothing]({})
}

struct DirEntry { name: String, kind: DirEntryKind }
enum DirEntryKind { file, directory, other }
fun read_dir(path: String): Result[Slice[DirEntry], Nothing] {
  var all_free_memory = Slice[Byte] {
    data = heap_head, len = get_stack_pointer().to_int() - heap_head.to_int()
  }
  var len = path.read_dir_impl(all_free_memory)
  if len < 0 then return error[Slice[DirEntry], Nothing]({})
  heap_head = heap_head + len

  var buffer = all_free_memory.subslice(0..len)
  var cursor = 0
  var entries = list[DirEntry]()
  loop {
    if cursor >= buffer.len then break
    var kind = buffer.get(cursor).to_int()
    cursor = cursor + 1
    var kind =
      if kind == 1 then DirEntryKind.file
      else if kind == 2 then DirEntryKind.directory
      else DirEntryKind.other
    var len = buffer.get_ref(cursor).to_address().to_reference[Int]().*
    cursor = cursor + 8
    var name = buffer.subslice(cursor ..+ len).to_string()
    cursor = cursor + len
    entries.&.push(DirEntry { name, kind })
  }
  ok[Slice[DirEntry], Nothing](entries.to_slice())
}
fun read_dir_impl(path: String, buffer: Slice[Byte]): Int asm {
  moveib a 8  add a sp load a a | path.data
  moveib b 16 add b sp load b b | path.len
  moveib c 24 add c sp load c c | buffer.data
  moveib d 32 add d sp load d d | buffer.len
  syscall 17
  load b sp | return value address
  store b a ret
}

| Printing and Logging  

struct Print {}
var stdout = Print {}
fun print[T](value: T) { stdout.write(value) }
fun println() { print(newline) }
fun println[T](value: T) { print(value) println() }
fun write_byte(print: Print, byte: Byte) asm {
  moveib a 8 add a sp | byte.&
  moveib b 1
  syscall 1 ret
}
fun write_bytes(print: Print, bytes: Slice[Byte]) asm {
  moveib a 8  add a sp load a a | bytes.data
  moveib b 16 add b sp load b b | bytes.len
  syscall 1 ret
}

struct Log {}
var stderr = Log {}
fun eprint[T](value: T) { stderr.write(value) }
fun eprintln() { eprint(newline) }
fun eprintln[T](value: T) { eprint(value) eprintln() }
fun log[T](value: T) { eprint(value) eprintln() }
fun write_byte(log: Log, byte: Byte) asm {
  moveib a 8 add a sp | byte.&
  moveib b 1
  syscall 2 ret
}
fun write_bytes(log: Log, bytes: Slice[Byte]) asm {
  moveib a 8  add a sp load a a | bytes.data
  moveib b 16 add b sp load b b | bytes.len
  syscall 2 ret
}

struct Stdin {}
var stdin = Stdin {}
fun read(stdin: Stdin, buffer: Slice[Byte]): Result[Int, Nothing] asm {
  moveib a 8  add a sp load a a | buffer.data
  moveib b 16 add b sp load b b | buffer.len
  syscall 11
  load b sp | return value address
  move st a isless cjump .ret_error
  .ret_ok: store b a moveib c 8 add b c moveib c 0 storeb b c ret
  .ret_error:        moveib c 8 add b c moveib c 1 storeb b c ret
}
fun read_byte(stdin: Stdin): Result[Maybe[Byte], Nothing] {
  var char = 0.lower_byte()
  ok[Maybe[Byte], Nothing](
    if stdin.read(Slice[Byte] { data = char.&.to_address(), len = 1 })? == 0
    then none[Byte]()
    else some(char)
  )
}
fun read_line(stdin: Stdin): Result[Maybe[String], Nothing] {
  var content = list[Byte]()
  loop {
    var byte = stdin.read_byte()? or {
      if content.is_empty() then return ok[Maybe[String], Nothing](none[String]())
      break
    }
    if byte == newline.byte then break
    content.&.push(byte)
  }
  ok[Maybe[String], Nothing](some(content.to_slice().to_string()))
}
