import stdlib.mar

| Rectangle  

struct Rectangle { left: Int, top: Int, right: Int, bottom: Int }
fun is_valid(rect: Rectangle): Bool {
  rect.left <= rect.right and rect.top <= rect.bottom
}

fun @(a: Point, b: Point): Rectangle {
  Rectangle {
    left   = min(a.x, b.x),
    top    = min(a.y, b.y),
    right  = max(a.x, b.x),
    bottom = max(a.y, b.y),
  }
}
fun by(a: Point, size: Point): Rectangle {
  Rectangle {
    left = a.x, top = a.y, right = a.x + size.x, bottom = a.y + size.y
  }
}

fun contains(rect: Rectangle, point: Point): Bool {
  (rect.left..rect.right).contains(point.x)
    and (rect.top..rect.bottom).contains(point.y)
}

fun center_x(rect: Rectangle): Int { rect.left + rect.right / 2 }
fun center_y(rect: Rectangle): Int { rect.top + rect.bottom / 2 }
fun top_left(rect: Rectangle): Point      { rect.left       @ rect.top }
fun top_right(rect: Rectangle): Point     { rect.right      @ rect.top }
fun bottom_left(rect: Rectangle): Point   { rect.left       @ rect.bottom }
fun bottom_right(rect: Rectangle): Point  { rect.right      @ rect.bottom }
fun center(rect: Rectangle): Point        { rect.center_x() @ rect.center_y() }
fun center_left(rect: Rectangle): Point   { rect.left       @ rect.center_y() }
fun center_top(rect: Rectangle): Point    { rect.center_x() @ rect.top }
fun center_right(rect: Rectangle): Point  { rect.right      @ rect.center_y() }
fun center_bottom(rect: Rectangle): Point { rect.center_x() @ rect.bottom }
