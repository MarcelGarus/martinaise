import stdlib.mar

| Fuzzing  
| You can fuzz almost every Martinaise function. When you do, the compiler
| generates a $Input struct that contains the inputs to the fuzzed function and
| then calls fuzzer_main[$Input](). The following functions are also generated:
| - run($Input): _                       | runs the fuzzed function
| - arg_strings($Input): List[String]    | stringifies the arguments

struct FuzzingInfo {
  has_target_position: Bool,
  fun_line: Int,
  fun_name: String,
}

fun fuzzer_main[Input](): Never {
  | Fuzzing works like this: We want to cover a lot of program behavior, which
  | means we want to achieve high coverage and find crashes. To do that, we
  | track the total program behavior we observed (total coverage and crashes).
  |
  | 1. Generate random inputs. Save the ones that result in new program behavior
  |    (input, output, and behavior).
  | 2. Iterate over the found inputs. For each of them, mutate it.
  |    If the mutated version achieves at least the same behavior but is
  |    smaller, replace the current input.
  |    If the mutated version is bigger but results in new behavior, save it.

  var start = now_instant()
  var info = static[Input]().fuzzing_info()
  var random = random_number_generator()
  var front = FuzzFront {
    coverage = coverage(get_coverage().len),
    found_crash = false, found_non_crash = false,
  }
  var samples = list[FuzzingSample[Input]]()
  var minimizing = 0

  var max_total_runs = 10000
  var total_runs = 0
  var no_new_coverage_runs = 0
  loop {
    if total_runs >= max_total_runs then break {}

    if samples.get_maybe_ref(minimizing) is some(original) then {
      | stdout."there's an input there\n"
      var num_shrink_tries = 1000
      var shrink_runs = 0
      loop {
        if total_runs >= max_total_runs then break {}
        if shrink_runs == num_shrink_tries then break {}
        shrink_runs = shrink_runs + 1

        var checkpoint = heap_checkpoint()
        var temperature = num_shrink_tries - shrink_runs
        | stderr."mutating: {original.input.debug()}\n"
        var mutated = original.input.mutate_valid(random.&, shrink_runs) or {
          free_everything_allocated_after(checkpoint)
          break
        }
        | stderr."mutated: {mutated.debug()}\n"
        var mutated = mutated.run_sandboxed()
        total_runs = total_runs + 1

        | eprintln("Mutated (comp {mutated.fuzzing_complexity()}) and original (comp {original.fuzzing_complexity()})")
        if original.coverage == mutated.coverage and original.crashes() == mutated.crashes() then {
          if mutated.fuzzing_complexity() < original.fuzzing_complexity() then {
            | stderr."Replacing {original.input.debug()} with {mutated.input.debug()}\n"
            original.* = mutated
            stderr."{total_runs} runs, {now_instant().nanos_since(start) / 1000000} ms\n"
            report(samples)
            shrink_runs = 0
            continue
          } else free_everything_allocated_after(checkpoint)
        } else if mutated.improves_upon(front) then {
          front.&.integrate(mutated)
          samples.&.push(mutated)
          stderr."{total_runs} runs, {now_instant().nanos_since(start) / 1000000} ms\n"
          report(samples)
        } else free_everything_allocated_after(checkpoint)
      }

      | We have tried long enough to shrink this input.
      | TODO: check that this isn't a duplicate shrunk input
      stderr."Moving on to next input"
      minimizing = minimizing + 1
    } else {
      var checkpoint = heap_checkpoint()
      var input = static[Input]().generate_valid(random.&, total_runs) or {
        stderr."Couldn't generate another input."
        break
      }
      var sample = input.run_sandboxed()
      total_runs = total_runs + 1

      if sample.improves_upon(front) then {
        no_new_coverage_runs = 0
        front.&.integrate(sample)
        samples.&.push(sample)
        stderr."{total_runs} runs, {now_instant().nanos_since(start) / 1000000} ms\n"
        report(samples)
      } else {
        no_new_coverage_runs = no_new_coverage_runs + 1
        if no_new_coverage_runs > 100 then break {}
        free_everything_allocated_after(checkpoint)
      }
    }
  }

  exit(0)
}
struct FuzzFront {
  coverage: Coverage, found_crash: Bool, found_non_crash: Bool
}
struct FuzzingSample[Input] {
  input: Input,
  arg_strings: Slice[String],
  coverage: Coverage,
  result: Result[String, Nothing],
}

fun improves_upon[Input](sample: FuzzingSample[Input], front: FuzzFront): Bool {
  if {sample.result is error} and not(front.found_crash) then return true
  if {sample.result is ok} and not(front.found_non_crash) then return true
  sample.coverage.improves_upon(front.coverage)
}

fun generate_valid[T](
  static: Static[T], random: &Random, complexity: Int
): Maybe[T] {
  for i in 0..1000 do {
    var generated = static.generate(random, complexity)
    if generated.is_valid() then return some(generated)
  }
  none[T]()
}
fun mutate_valid[T](value: T, random: &Random, temperature: Int): Maybe[T] {
  for i in 0..1000 do {
    var mutated = value.mutate(random, temperature)
    if mutated.is_valid() then return some(mutated)
  }
  none[T]()
}

fun run_sandboxed[Input](input: Input): FuzzingSample[Input] {
  var arg_strings = input.arg_strings()
  | stderr."Running {comma_separated(arg_strings)} -> "

  var current_cov = get_coverage()
  current_cov.reset()

  var input_copy = input.copy()
  disable_syscalls()
  var res = try input_copy.run()
  enable_syscalls()

  var coverage = coverage(current_cov.len)
  coverage.integrate(current_cov)

  var result =
    switch res
    case ok(res) ok[String, Nothing]("{res.debug()}")
    case error error[String, Nothing]({})
  | stderr.write(result or "<panicked>")
  | stderr."\n"
  | stderr." (complexity {input.fuzzing_complexity()})\n"

  FuzzingSample { input, arg_strings, coverage, result }
}
fun enable_syscalls() asm {
  movei a _syscalls_enabled  moveib b 1  storeb a b  ret
}
fun disable_syscalls() asm {
  movei a _syscalls_enabled  moveib b 0  storeb a b  ret
}

fun complexity[Input](input: FuzzingSample[Input]): Int {
  var sum = 0
  for arg in input.arg_strings do sum = sum + arg.len
  sum
}
fun crashes[Input](input: FuzzingSample[Input]): Bool {
  switch input.result case ok false case error true
}
fun integrate[Input](front: &FuzzFront, input: FuzzingSample[Input]) {
  front.coverage.integrate(input.coverage)
  if input.result is ok then front.found_non_crash = true
  if input.result is error then front.found_crash = true
}

fun report[Input](samples: List[FuzzingSample[Input]]) {
  var checkpoint = heap_checkpoint()
  var info = static[Input]().fuzzing_info()

  var calls_array = list[Json]()
  for sample in samples do
    if not(info.has_target_position) or sample.coverage.reached_target() then
      calls_array.&.push(sample.to_json())

  println(Json.map(map(
    "type" -> Json.string("example_calls"),
    "fun_start_line" -> Json.int(info.fun_line),
    "fun_name" -> Json.string(info.fun_name),
    "calls" -> Json.array(calls_array),
  )))
  free_everything_allocated_after(checkpoint)
}
fun to_json[Input](sample: FuzzingSample[Input]): Json {
  var json_args = list[Json]()
  for arg in sample.arg_strings do json_args.&.push(Json.string(arg))
  Json.map(map(
    "inputs" -> Json.array(json_args),
    "result" -> Json.map(map(
      "status" -> Json.string(
        switch sample.result case ok "returned" case error "panicked"
      ),
      "value" -> Json.string(sample.result or "<panicked>"),
    )),
  ))
}

| Generating and mutating values  
| To fuzz functions, we need to be able to generate random inputs of any type.

| This type allows dispatching based on type. For example, if you implement a
| foo(s: Static[Int]), foo(s: Static[String]), etc. then you can do
| static[T]().foo() in generic functions even if you don't have a T at hand.
struct Static[T] {}

fun static[T](): Static[T] { Static[T] {} }

| The compiler can auto-implement this function for structs and enums by calling
| copy on the fields/variants.
fallback fun copy[T](value: T): T { ... }
fun copy[T](value: &T): &T { value.*.copy().put_on_heap() }

| The compiler can auto-implement this function for structs and enums. The
| random instance should be used as the only source for randomness. The
| size of the generated input should be in O(complexity).
fallback fun generate[T](
  s: Static[T], random: &Random, complexity: Int
): T { ... }

fun generate[T](s: Static[&T], random: &Random, complexity: Int): &T {
  static[T]().generate(random, complexity).put_on_heap()
}

| Returns a complexity evaluation of an input.
fallback fun fuzzing_complexity[T](value: T): Float { ... }

| Splits a complexity into n smaller complexities with a sum <= the original
| one.
fun split(random: &Random, complexity: Int, n: Int): Slice[Int] {
  if n == 0 then return empty_slice[Int]()
  | TODO: add some random variation
  filled_slice(n, complexity / n)
}
fun split_2(random: &Random, complexity: Int): Tuple2[Int, Int] {
  var complexities = random.split(complexity, 2)
  tuple(complexities.get(0), complexities.get(1))
}
fun split(random: &Random, complexity: Int): Slice[Int] {
  var len = random.next_int(0..={complexity / 10})
  random.split(complexity, len)
}

| Returns a mutated version of the value. The temperature should be an indicator
| for how big the changes are.
fallback fun mutate[T](value: T, random: &Random, temperature: Int): T { ... }

fun mutate[T](value: &T, random: &Random, temperature: Int): &T {
  value.*.mutate(random, temperature).put_on_heap()
}

fallback fun is_valid[T](value: T): Bool { ... }
fun is_valid[T](value: &T): Bool { value.*.is_valid() }

| Coverage  
| The compiler can be configured to instrument the fuzzed function with coverage
| tracking. In that case, the _coverage_bitset and _coverage_len assembly labels
| will point to a section of bytes that are 1 or 0, depending on if a cjump in
| the fuzzed function was executed. To track coverage, we just have to reset the
| global coverage bitmap and call the function to fuzz – this automatically
| updates the global coverage field.

struct Coverage { bitset: Address, len: Int }

fun coverage(len: Int): Coverage {
  var coverage = Coverage { bitset = malloc(len, 1), len }
  coverage.reset()
  coverage
}
fun get_coverage(): Coverage asm {
  load a sp | return address
  movei b _coverage_bitset store a b | coverage.bitset
  moveib b 8 add a b movei b _coverage_len load b b store a b | coverage.len
  ret
}
fun reset(coverage: Coverage) asm {
  moveib a 8  add a sp load a a | a = cursor = coverage.bitset
  moveib b 16 add b sp load b b | b = coverage.len
  moveib c 0                    | c = counter
  moveib d 0 moveib e 1         | constants
  .loop:
  cmp c b isequal cjump .done
  storeb a d
  add a e add c e jump .loop
  .done: ret
}
fun ==(a: Coverage, b: Coverage): Bool {
  a.len == b.len or panic()
  memcompare(a.bitset, b.bitset, a.len) is equal
}
fun get_ref(coverage: Coverage, index: Int): &Bool {
  {coverage.bitset + index}.to_reference[Bool]()
}
fun is_marked(coverage: Coverage, index: Int): Bool {
  coverage.get_ref(index).*
}
fun mark(coverage: Coverage, index: Int) { coverage.get_ref(index).* = true }
fun improves_upon(new: Coverage, original: Coverage): Bool {
  for i in 0..new.len do
    if new.is_marked(i) and not(original.is_marked(i)) then return true
  return false
}
fun integrate(total: Coverage, other: Coverage) {
  for i in 0..other.len do if other.is_marked(i) then total.mark(i)
}
fun reached_target(coverage: Coverage): Bool {
  | If the compiler was told to instrument a specific position in the code, the
  | last mark in the coverage map is for the target position.
  coverage.is_marked(coverage.len - 1)
}
fun write[W](writer: W, coverage: Coverage) {
  for i in 0..coverage.len do {
    var byte = {coverage.bitset + i}.to_reference[Byte]().*.to_int()
    writer."{if byte == 0 then "." else if byte == 1 then "X" else "?"}"
  }
}
