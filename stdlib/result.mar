import stdlib.mar

| Result  
| The result of something that can either work or fail.
enum Result[O, E] { ok: O, error: E }

fun ok[O, E](o: O): Result[O, E] { Result[O, E].ok(o) }
fun error[O, E](e: E): Result[O, E] { Result[O, E].error(e) }

fun unwrap[O, E](result: Result[O, E], message: String): O {
  switch result case ok(o) o case error panic(message)
}
fun unwrap[O, E](result: Result[O, E]): O {
  switch result case ok(o) o case error(e) panic("called error.unwrap: {e}")
}

fun write[W, O, E](writer: W, result: Result[O, E]) {
  switch result
  case ok(o) writer."ok({o})"
  case error(e) writer."error({e})"
}
fun ==[O, E](a: Result[O, E], b: Result[O, E]): Bool {
  switch a
  case ok(ao) { switch b case ok(bo) ao == bo case error false }
  case error(ae) { switch b case error(be) ae == be case ok false }
}
fun hash[O, E](hasher: &Hasher, result: Result[O, E]) {
  switch result
  case ok(o) { hasher.hash(#o) hasher.hash(o) }
  case error(e) { hasher.hash(#e) hasher.hash(e) }
}

fun or[O, E](result: Result[O, E]): ControlFlow[O, E] {
  switch result
  case ok(o)    ControlFlow[O, E].short_circuit(o)
  case error(e) ControlFlow[O, E].evaluate_alternative(e)
}
