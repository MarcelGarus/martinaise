import stdlib.mar

| JSON  
| Ugh, terminology. Technically, the JavaScript Object Notation is only a
| notation, so only a String. If a JSON string is parsed, it's no longer a
| notation, so no longer JSON. I considered using something like JSOM
| (JavaScript Object Model?) for the parsed data, but that would confuse
| everyone reading the code, including myself. So, sadly, the parsed structure
| is called Json, just because that's the industry standard (tm).

enum Json {
  null,
  bool: Bool,
  int: Int, | TODO: Floats instead of ints
  string: String,
  array: List[Json],
  map: Map[String, Json],
}

fun write[W](writer: W, json: Json) {
  switch json
  case null writer."null"
  case bool(bool) writer."{bool}"
  case int(int) writer."{int}"
  case string(string) {
    writer."\""
    for char in string do {
      if char == newline then writer."\\n"
      else if char == #\ then writer."\\\\"
      else if char == #" then writer."\\\""
      else writer."{char}"
    }
    writer."\""
  }
  case array(list) writer."[{comma_separated(list)}]"
  case map(map) {
    writer."\{"
    var first = true
    for entry in map do {
      if first then first = false else writer.", "
      writer."\"{entry.key}\": {entry.value}"
    }
    writer."}"
  }
}
fun parse_json(json: String): Result[Json, Nothing] {
  var parser = JsonParser { input = json, cursor = 0 }
  var object = parser.&.parse()?
  parser.rest().is_empty() or return error[Json, Nothing]({})
  ok[Json, Nothing](object)
}
struct JsonParser { input: String, cursor: Int }
fun current(parser: JsonParser): Char {
  parser.input.chars().get(parser.cursor)
}
fun rest(parser: JsonParser): String { parser.input.without_first(parser.cursor) }
fun is_done(parser: JsonParser): Bool { parser.rest().is_empty() }
fun advance(parser: &JsonParser, n: Int) { parser.cursor = parser.cursor + n }
fun advance(parser: &JsonParser): Char {
  var char = parser.current()
  parser.advance(1)
  char
}
fun consume_whitespace(parser: &JsonParser) {
  loop if parser.current().is_whitespace() then parser.advance(1) else break
}
fun consume(parser: &JsonParser, char: Char): Bool {
  parser.consume_whitespace()
  if parser.current() == char then { parser.advance() true } else false
}
fun consume(parser: &JsonParser, prefix: String): Bool {
  parser.consume_whitespace()
  if parser.rest().starts_with(prefix)
  then { parser.advance(prefix.len) true }
  else false
}
fun parse_null(parser: &JsonParser): Maybe[Nothing] {
  if parser.consume("null") then some({}) else none[Nothing]()
}
fun parse_bool(parser: &JsonParser): Maybe[Bool] {
  if parser.consume("true")  then return some(true)
  if parser.consume("false") then return some(false)
  none[Bool]()
}
fun parse_int(parser: &JsonParser): Result[Maybe[Int], Nothing] {
  var start = parser.cursor
  var num = 0
  loop
    if parser.is_done() then break
    else if {#0..=#9}.contains(parser.current()) then
      num = num * 10 + {parser.advance() - #0}.to_int()
    else break
  if parser.cursor == start then return ok[Maybe[Int], Nothing](none[Int]())
  ok[Maybe[Int], Nothing](some(num))
}
fun parse_string(parser: &JsonParser): Result[Maybe[String], Nothing] {
  parser.consume(#") or return ok[Maybe[String], Nothing](none[String]())
  var chars = list[Char]()
  loop {
    if parser.is_done() then
      return error[Maybe[String], Nothing]({}) | string doesn't end
    if parser.current() == #" then {
      parser.advance()
      return ok[Maybe[String], Nothing](some(chars.to_string()))
    }
    if parser.current() == #\ then {
      parser.advance()
      if parser.current() == #\ then chars.&.push(#\)
      else if parser.current() == #" then chars.&.push(#")
      else if parser.current() == #n then chars.&.push(newline)
      else return error[Maybe[String], Nothing]({}) | invalid escape
      parser.advance()
    } else {
      chars.&.push(parser.current())
      parser.advance()
    }
  }
}
fun parse_array(parser: &JsonParser): Result[Maybe[List[Json]], Nothing] {
  parser.consume(#[) or return ok[Maybe[List[Json]], Nothing](none[List[Json]]())
  var array = list[Json]()
  loop if parser.current() == #] then break else {
    array.&.push(parser.parse()?)
    parser.consume(#,) or break
  }
  parser.consume(#]) or return error[Maybe[List[Json]], Nothing]({})
  ok[Maybe[List[Json]], Nothing](some(array))
}
fun parse_map(parser: &JsonParser): Result[Maybe[Map[String, Json]], Nothing] {
  parser.consume(#{) or
    return ok[Maybe[Map[String, Json]], Nothing](none[Map[String, Json]]())
  var map = map[String, Json]()
  loop if parser.consume(#}) then break else {
    var key = parser.parse_string()? or return error[Maybe[Map[String, Json]], Nothing]({})
    parser.consume(#:) or return error[Maybe[Map[String, Json]], Nothing]({})
    var value = parser.parse()?
    map.&.put(key, value)
    parser.consume(#,)
  }
  ok[Maybe[Map[String, Json]], Nothing](some(map))
}
fun parse(parser: &JsonParser): Result[Json, Nothing] {
  parser.consume_whitespace()
  if parser.parse_null() is some then return ok[Json, Nothing](Json.null)
  if parser.parse_bool() is some(b) then return ok[Json, Nothing](Json.bool(b))
  if parser.parse_int()? is some(i) then return ok[Json, Nothing](Json.int(i))
  if parser.parse_string()? is some(s) then return ok[Json, Nothing](Json.string(s))
  if parser.parse_array()? is some(a) then return ok[Json, Nothing](Json.array(a))
  if parser.parse_map()? is some(m) then return ok[Json, Nothing](Json.map(m))
  error[Json, Nothing]({})
}
