import stdlib.mar

| Queue  
| A growable array-like structure where you can push and pop from both ends.
| It maintains an inclusive start and an exclusive end index. Basically, there
| are two possibilities how this can be layed out:
|
| Start before end:           End before start:
| [-][0][1][2][3][4][-][-]    [3][4][-][-][-][0][1][2]
|     s              e               e        s

struct Queue[T] { data: Slice[T], start: Int, end: Int }

fun is_valid[T](queue: Queue[T]): Bool {
  {0..queue.data.len}.contains(queue.start) or return false
  {0..queue.data.len}.contains(queue.end) or return false
  for item in queue do item.is_valid() or return false
  true
}

fun queue[T](): Queue[T] {
  Queue { data = uninitialized_slice[T](8), start = 0, end = 0 }
}
fun len[T](queue: Queue[T]): Int {
  if queue.end >= queue.start
  then queue.end - queue.start
  else queue.data.len - queue.start + queue.end
}
fun is_empty[T](queue: Queue[T]): Bool { queue.len() == 0 }
fun to_slices[T](queue: Queue[T]): Tuple2[Slice[T], Slice[T]] {
  if queue.end >= queue.start
  then tuple(queue.data.subslice(queue.start .. queue.end), empty_slice[T]())
  else tuple(
    queue.data.subslice(queue.start .. queue.data.len),
    queue.data.subslice(0 .. queue.start)
  )
}
fun reserve[T](queue: &Queue[T], size: Int) {
  | Except for empty queues, we need size + 1 slots to store size items.
  if size == 0 then return {}
  if queue.data.len > size then return {}
  var slices = queue.to_slices()
  var len = queue.len()
  queue.data = uninitialized_slice[T]({size + 1}.round_up_to_power_of(2))
  slices.a.copy_to(queue.data.subslice(0..slices.a.len))
  slices.b.copy_to(queue.data.subslice(slices.a.len..{slices.a.len + slices.b.len}))
  queue.start = 0
  queue.end = len
}
fun push_front[T](queue: &Queue[T], item: T) {
  queue.reserve(queue.len() + 1)
  queue.start = if queue.start == 0
    then queue.data.len - 1
    else queue.start - 1
  queue.data.get_ref(queue.start).* = item
}
fun pop_front_maybe[T](queue: &Queue[T]): Maybe[T] {
  if queue.is_empty() then return none[T]()
  var item = queue.data.get(queue.start)
  queue.start = queue.start + 1 % queue.data.len
  some(item)
}
fun pop_front[T](queue: &Queue[T]): T {
  queue.pop_front_maybe() or panic("called pop_front on empty queue")
}
fun push_back[T](queue: &Queue[T], item: T) {
  queue.reserve(queue.len() + 1)
  queue.data.get_ref(queue.end).* = item
  queue.end = queue.end + 1 % queue.data.len
}
fun pop_back_maybe[T](queue: &Queue[T]): Maybe[T] {
  if queue.is_empty() then return none[T]()
  queue.end = if queue.end == 0
    then queue.data.len
    else queue.end.dec()
  some(queue.data.get(queue.end))
}
fun pop_back[T](queue: &Queue[T]): T {
  queue.pop_back_maybe() or panic("called pop_back on empty queue")
}
fun get_maybe_ref[T](queue: Queue[T], index: Int): Maybe[&T] {
  {0..queue.len()}.contains(index) or return none[&T]()
  queue.data.get_maybe_ref(queue.start + index % queue.data.len)
}
fun get_ref[T](queue: Queue[T], index: Int): &T {
  queue.get_maybe_ref(index) or panic("index out of bounds")
}
fun get[T](queue: Queue[T], index: Int): T { queue.get_ref(index).* }
fun ==[T](a: Queue[T], b: Queue[T]): Bool {
  a.len() == b.len() or return false
  for i in 0..a.len() do a.get(i) == b.get(i) or return false
  true
}

fun iter[T](queue: Queue[T]): Iter[T, _] {
  Iter[T, QueueIter[T]] { state = QueueIter { queue, index = 0 } }
}
struct QueueIter[T] { queue: Queue[T], index: Int }
fun next[T](iter: &Iter[T, QueueIter[T]]): Maybe[T] {
  var state = iter.state.&
  if state.index < state.queue.len() then {
    var item = state.queue.get(state.index)
    state.index = state.index + 1
    some(item)
  } else none[T]()
}

fun generate[T](
  static: Static[Queue[T]], random: &Random, complexity: Int
): Queue[T] {
  var items = static[Slice[T]]().generate(random, complexity)
  var queue = queue[T]()
  for item in items do queue.&.push_back(item)
  queue
}
