import stdlib.mar

| Range  
| Ranges have an inclusive start and exclusive end value.

struct Range[T] { start: T, end: T }

fun ..[T](start: T, end: T): Range[T] { Range { start, end } }
fun ..=[T](start: T, end: T): Range[T] { Range { start, end = end.inc() } }
fun ..+[T, D](start: T, len: D): Range[T] { Range { start, end = start + len } }
fun ..+=[T, D](start: T, len: D): Range[T] {
  Range { start, end = start + len.inc() }
}
fun +-[T](mid: T, distance: T): Range[T] { | thanks to @antoniusnaumann
  Range { start = mid - distance, end = {mid + distance}.inc() }
}

fun len[T](range: Range[T]): Int { range.end - range.start }
fun contains[T](range: Range[T], value: T): Bool {
  value >= range.start and value < range.end
}
fun is_empty[T](range: Range[T]): Bool { range.start >= range.end }
fun write[W, T](writer: W, range: Range[T]) {
  writer."{range.start}..{range.end}"
}
fun write_debug[W, T](writer: W, range: Range[T]) {
  writer."{debug(range.start)}..{debug(range.end)}"
}
fun generate[T](
  s: Static[Range[T]], random: &Random, complexity: Int
): Range[T] {
  var complexities = random.split_2(complexity)
  var a = static[T]().generate(random, complexities.a)
  var b = static[T]().generate(random, complexities.b)
  min(a, b)..max(a, b)
}
fun mutate[T](range: Range[T], random: &Random, temperature: Int): Range[T] {
  var bounds =
    if random.next_bool()
    then tuple(range.start, range.end.mutate(random, temperature))
    else tuple(range.start.mutate(random, temperature), range.end)
  bounds.min()..bounds.max()
}

fun iter[T](range: Range[T]): Iter[T, _] {
  Iter[T, RangeIter[T]] { state = RangeIter { rest = range } }
}
struct RangeIter[T] { rest: Range[T] }
fun next[T](iter: &Iter[T, RangeIter[T]]): Maybe[T] {
  var state = iter.state.&
  if state.rest.is_empty() then none[T]() else {
    var current = state.rest.start
    state.rest.start = current.inc()
    some(current)
  }
}
