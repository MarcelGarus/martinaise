| Welcome to Martinaise!  
| Martinaise is a language that's designed for solving simple puzzles such as
| advent of code. Making a language that is widely-used is _not_ the goal.
| Instead, this is a fun, recreational project.
|
| The language is quite small, so it only has a handful of builtin functions.
| Most of the functionality is defined in Martinaise code, even basic things
| like Bool or integers. The compiler relies on some of these definitions, so be
| careful when deleting code in this file.

| Todos  
| TODO: language features
| TODO:   support getting reference to enum payload
| TODO:   provide way to get memory layouts of types as runtime values
| TODO:   break and continue with targets
| TODO:   funs as values, function types, higher-order funs?
| TODO: catch more errors
| TODO:   enforce that statement-like expressions evaluate to Nothing
| TODO:   disallow _ in type args, structs, enums, and recursive functions
| TODO:   improve int parsing: be strict about whitespace
| TODO:   catch circular global definitions
| TODO:   catch circular types
| TODO: stdlib
| TODO:   segment tree
| TODO:   treap
| TODO: tooling
| TODO:   breakpoint

import asm.mar
import bool.mar
import byte.mar
import core.mar
import float.mar
import fuzzing.mar
import hashing.mar
import int.mar
import io.mar
import iter.mar
import json.mar
import list.mar
import map.mar
import matrix.mar
import maybe.mar
import mem.mar
import ops.mar
import ordering.mar
import point.mar
import process.mar
import queue.mar
import random.mar
import range.mar
import rectangle.mar
import result.mar
import set.mar
import stack.mar
import string.mar
import time.mar
import tuples.mar
import type.mar
import units.mar
